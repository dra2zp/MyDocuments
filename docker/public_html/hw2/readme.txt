D.J. Anderson
dra2zp
CS 4640
Homework 2

color_test.html -> main HTML file for designing the webpage

color_gen.js -> JavaScript code for the main HTML file

Answers to questions:
(1) This assignment took me approximately six hours. The most time-consuming part was trying to figure out how to
    generate the random rgb values. I spent about two hours trying to tweak formulas so the color blocks would
    "appear" random. I used Date.now(), which returns the number of milliseconds elapsed since 01/01/1970. Then, I
    finally realized there was a function called Math.random(), which generates a random number, so I combined both
    of these to generate random rgb color values. The hardest part was figuring out how to arrange the blocks on the
    webpage. At first, I used a table and tried to adjust the row height so that the width and height would be about
    the same. Then, I tried to use various div and span elements so I could specify exactly how many pixels to make
    the width and height of each block. I successfully figured out how to layout the div and span elements and
    generate them in JavaScript, so I abandoned the whole table idea.
(2) I generated the color test pattern using both the Date.now() function and the Math.random() function.
    var t = Date.now(); // t = the number of milliseconds elapsed since 01/01/1970
    var v = t * (1 + i + j); // this is inside the doubly-nested for-loop
    	      	       	     // the purpose of this is to change the value during each execution of the for-loop
			     // the "1 + ..." ensures that v will not equal zero
    var r = (Math.floor((v / Math.random() * Math.pow(10, 3)))) % 256; // for each color value (r, g, and b), the color
    var g = (Math.floor((v / Math.random() * Math.pow(10, 3)))) % 256; // was generated by dividing the value v by a
    var b = (Math.floor((v / Math.random() * Math.pow(10, 3)))) % 256; // random number multiplied by 10^3 (to make the
    	    		     		     		  	       // number bigger since Math.random() returns a
								       // number between 0 and 1), taking the floor of
								       // that number (because it should not be a
								       // decimal), and taking that number modulo 256
								       // (because rgb values only range from 0-255)
(3) I validated form input by setting the HTML input type as "decimal", and checking to make sure that the input was
    not an empty string, not less than one, not greater than some large number, and not a decimal. To ensure that the
    input was not a decimal, I took the floor and ceiling of the number and checked that both of these numbers were
    equal to the number in question.
