# -*-sh-*- # this line enables partial syntax highlighting in emacs

######### The PC #############
register xF { pc:64 = 0; }


########## Fetch #############
pc = F_pc;



f_icode = i10bytes[4..8];
f_ifun = i10bytes[0..4];
f_rA = i10bytes[12..16];
f_rB = i10bytes[8..12];

f_valC = [
	f_icode in { JXX } : i10bytes[8..72];
	1 : i10bytes[16..80];
];

wire offset:64, valP:64;

offset = [
        f_icode in {HALT} : 0;
	f_icode in { HALT, NOP, RET } : 1;
	f_icode in { RRMOVQ, OPQ, PUSHQ, POPQ } : 2;
	f_icode in { JXX, CALL } : 9;
	1 : 10;
];
valP = F_pc + offset;

f_Stat = [
	f_icode == HALT : STAT_HLT;
	f_icode > 0xb : STAT_INS;
	x_pc > 0xfff : STAT_ADR;
	1 : STAT_AOK;
];

########## Decode #############
register fD{
icode:4 = NOP;
ifun:4 = 0;
rA:4 = 0;
rB:4 = 0;
Stat:3 = 0;
valC:64 = 0;
}
d_rA = D_rA;
d_rB = D_rB;
d_valC = D_valC;
d_icode = D_icode;
d_Stat = D_Stat;

reg_srcA = [
	D_icode in {RMMOVQ,MRMOVQ} : D_rA;
	1 : REG_NONE;
];
reg_srcB = [
	D_icode in {RMMOVQ, MRMOVQ} : D_rB;
	1 : REG_NONE;
];

d_rvalA = [
reg_srcA == REG_NONE : 0;
reg_srcA == m_dstM : m_mem_output;
reg_srcA == W_dstM : W_mem_output;
1: reg_outputA;
];

d_rvalB = [
reg_srcB == REG_NONE : 0;
reg_srcB == m_dstM : m_mem_output;
reg_srcB == W_dstM : W_mem_output;
1: reg_outputB;
];

d_dstM = [
D_icode in {MRMOVQ} : D_rA;
1:REG_NONE;
];

wire loadUse:1;
loadUse =[
e_icode in {MRMOVQ} && ((reg_srcB == e_dstM) || (reg_srcA == e_dstM)): 1;
1:0;
];

stall_F =loadUse || (f_Stat !=STAT_AOK);
stall_D = loadUse;
bubble_E = loadUse;
########## Execute #############
register dE{
icode:4 = 0;
valC:64 = 0;
dstM:4 = REG_NONE;
rvalB:64 = 0;
rvalA:64 = 0;
rA:4 = 0;
rB:4 = 0;
Stat:3 = 0;
}

e_icode = E_icode;
e_valC = E_valC;
e_dstM = E_dstM;
e_rvalB = E_rvalB;
e_rvalA = E_rvalA;
e_rA = E_rA;
e_rB = E_rB;
e_Stat = E_Stat;


wire operand1:64, operand2:64;

operand1 = [
	E_icode in { MRMOVQ, RMMOVQ } : E_valC;
	1: 0;
];
operand2 = [
	E_icode in { RMMOVQ,MRMOVQ } : E_rvalB;

	1: 0;
];

e_valE = [
	E_icode in { MRMOVQ, RMMOVQ } : operand1 + operand2;
	1 : 0;
];



########## Memory #############
register eM{
Stat:3 = 0;
valE:64 = 0;
icode:4 = NOP;
rA:4 = 0;
rB:4 = 0;
rvalA:64 = 0;
rvalB:64 = 0;
dstM:4 = REG_NONE;
valC:64 = 0;
}
m_icode = M_icode;
m_valE = M_valE;
m_rA = M_rA;
m_rB = M_rB;
m_rvalA = M_rvalA;
m_rvalB = M_rvalB;
m_dstM = M_dstM;
m_Stat = M_Stat;

mem_readbit = [
M_icode in { MRMOVQ }: 1;
1: 0;
];

mem_writebit = [
M_icode in { RMMOVQ }: 1;
1: 0;
];
mem_addr = [
	M_icode in { MRMOVQ, RMMOVQ } : M_valE;
];
mem_input = [
	M_icode in { RMMOVQ } : M_rvalA;
];
m_mem_output = mem_output;
########## Writeback #############
register mW{
Stat:3 = 0;
valE:64 = 0;
icode:4 = 0;
mem_output: 64 = 0;
rA:4 = 0;
rB:4 = 0;
rvalA:64 = 0;
rvalB:64 = 0;
dstM:4 = 0;
}

reg_dstM = [ 
	W_icode in {MRMOVQ} : W_dstM;
	1: REG_NONE;
];
reg_inputM = [
	W_icode in {MRMOVQ} : W_mem_output;
];


Stat = W_Stat;

x_pc = valP;