DIGEST 87e829b2295b5f6fa79b4d873312ce99
FCoq.MSets.MSetList
R691:703 Coq.MSets.MSetInterface <> <> lib
R705:715 Coq.Structures.OrdersFacts <> <> lib
R717:727 Coq.Structures.OrdersLists <> <> lib
R1040:1050 Coq.Structures.Orders OrderedType <> mod
R1056:1059 Coq.MSets.MSetInterface WOps <> mod
R1061:1061 Coq.MSets.MSetList X <> modtype
mod 1033:1035 <> Ops
def 1078:1080 Ops elt
R1085:1087 Coq.MSets.MSetList X t defax
def 1103:1103 Ops t
R1108:1111 Coq.Init.Datatypes <> list ind
R1113:1115 Coq.MSets.MSetList Ops elt def
def 1132:1136 Ops empty
R1140:1140 Coq.MSets.MSetList Ops t def
R1145:1147 Coq.Init.Datatypes <> nil constr
def 1164:1171 Ops is_empty
R1178:1178 Coq.MSets.MSetList Ops t def
R1187:1187 Coq.MSets.MSetList <> l var
R1204:1208 Coq.Init.Datatypes <> false constr
R1194:1197 Coq.Init.Datatypes <> true constr
def 1256:1258 Ops mem
R1277:1277 Coq.MSets.MSetList <> s var
R1290:1292 Coq.Init.Datatypes <> nil constr
R1297:1301 Coq.Init.Datatypes <> false constr
R1310:1313 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R1333:1341 Coq.MSets.MSetList X compare defax
R1343:1343 Coq.MSets.MSetList <> x var
R1362:1363 Coq.Init.Datatypes <> Lt constr
R1368:1372 Coq.Init.Datatypes <> false constr
R1384:1385 Coq.Init.Datatypes <> Eq constr
R1390:1393 Coq.Init.Datatypes <> true constr
R1405:1406 Coq.Init.Datatypes <> Gt constr
R1411:1413 Coq.MSets.MSetList <> mem def
R1415:1415 Coq.MSets.MSetList <> x var
def 1452:1454 Ops add
R1473:1473 Coq.MSets.MSetList <> s var
R1486:1488 Coq.Init.Datatypes <> nil constr
R1494:1497 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R1493:1493 Coq.MSets.MSetList <> x var
R1498:1500 Coq.Init.Datatypes <> nil constr
R1509:1512 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R1532:1540 Coq.MSets.MSetList X compare defax
R1542:1542 Coq.MSets.MSetList <> x var
R1561:1562 Coq.Init.Datatypes <> Lt constr
R1568:1571 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R1567:1567 Coq.MSets.MSetList <> x var
R1572:1572 Coq.MSets.MSetList <> s var
R1584:1585 Coq.Init.Datatypes <> Eq constr
R1590:1590 Coq.MSets.MSetList <> s var
R1602:1603 Coq.Init.Datatypes <> Gt constr
R1609:1612 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R1613:1615 Coq.MSets.MSetList <> add def
R1617:1617 Coq.MSets.MSetList <> x var
def 1656:1664 Ops singleton
R1671:1673 Coq.MSets.MSetList Ops elt def
R1680:1683 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R1679:1679 Coq.MSets.MSetList <> x var
R1684:1686 Coq.Init.Datatypes <> nil constr
def 1701:1706 Ops remove
R1714:1714 Coq.MSets.MSetList Ops t def
R1729:1729 Coq.MSets.MSetList <> s var
R1742:1744 Coq.Init.Datatypes <> nil constr
R1749:1751 Coq.Init.Datatypes <> nil constr
R1760:1763 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R1783:1791 Coq.MSets.MSetList X compare defax
R1793:1793 Coq.MSets.MSetList <> x var
R1812:1813 Coq.Init.Datatypes <> Lt constr
R1818:1818 Coq.MSets.MSetList <> s var
R1830:1831 Coq.Init.Datatypes <> Eq constr
R1848:1849 Coq.Init.Datatypes <> Gt constr
R1855:1858 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R1859:1864 Coq.MSets.MSetList <> remove def
R1866:1866 Coq.MSets.MSetList <> x var
def 1903:1907 Ops union
R1914:1914 Coq.MSets.MSetList Ops t def
R1920:1923 Coq.Init.Logic <> :type_scope:x_'->'_x not
R1924:1924 Coq.MSets.MSetList Ops t def
R1919:1919 Coq.MSets.MSetList Ops t def
R1939:1939 Coq.MSets.MSetList <> s var
R1952:1954 Coq.Init.Datatypes <> nil constr
R1969:1970 Coq.MSets.MSetList <> s' var
R1979:1982 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R2017:2017 Coq.MSets.MSetList Ops t def
R2022:2022 Coq.MSets.MSetList Ops t def
R2044:2045 Coq.MSets.MSetList <> s' var
R2065:2067 Coq.Init.Datatypes <> nil constr
R2072:2072 Coq.MSets.MSetList <> s var
R2089:2092 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R2120:2128 Coq.MSets.MSetList X compare defax
R2157:2158 Coq.Init.Datatypes <> Lt constr
R2164:2167 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R2168:2172 Coq.MSets.MSetList <> union def
R2176:2177 Coq.MSets.MSetList <> s' var
R2196:2197 Coq.Init.Datatypes <> Eq constr
R2203:2206 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R2207:2211 Coq.MSets.MSetList <> union def
R2235:2236 Coq.Init.Datatypes <> Gt constr
R2243:2246 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R2247:2255 Coq.MSets.MSetList <> union_aux var
def 2316:2320 Ops inter
R2327:2327 Coq.MSets.MSetList Ops t def
R2333:2336 Coq.Init.Logic <> :type_scope:x_'->'_x not
R2337:2337 Coq.MSets.MSetList Ops t def
R2332:2332 Coq.MSets.MSetList Ops t def
R2352:2352 Coq.MSets.MSetList <> s var
R2365:2367 Coq.Init.Datatypes <> nil constr
R2381:2383 Coq.Init.Datatypes <> nil constr
R2392:2395 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R2430:2430 Coq.MSets.MSetList Ops t def
R2435:2435 Coq.MSets.MSetList Ops t def
R2457:2458 Coq.MSets.MSetList <> s' var
R2478:2480 Coq.Init.Datatypes <> nil constr
R2485:2487 Coq.Init.Datatypes <> nil constr
R2504:2507 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R2535:2543 Coq.MSets.MSetList X compare defax
R2572:2573 Coq.Init.Datatypes <> Lt constr
R2578:2582 Coq.MSets.MSetList <> inter def
R2586:2587 Coq.MSets.MSetList <> s' var
R2606:2607 Coq.Init.Datatypes <> Eq constr
R2613:2616 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R2617:2621 Coq.MSets.MSetList <> inter def
R2645:2646 Coq.Init.Datatypes <> Gt constr
R2651:2659 Coq.MSets.MSetList <> inter_aux var
def 2720:2723 Ops diff
R2730:2730 Coq.MSets.MSetList Ops t def
R2736:2739 Coq.Init.Logic <> :type_scope:x_'->'_x not
R2740:2740 Coq.MSets.MSetList Ops t def
R2735:2735 Coq.MSets.MSetList Ops t def
R2755:2755 Coq.MSets.MSetList <> s var
R2768:2770 Coq.Init.Datatypes <> nil constr
R2784:2786 Coq.Init.Datatypes <> nil constr
R2795:2798 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R2832:2832 Coq.MSets.MSetList Ops t def
R2837:2837 Coq.MSets.MSetList Ops t def
R2859:2860 Coq.MSets.MSetList <> s' var
R2880:2882 Coq.Init.Datatypes <> nil constr
R2887:2887 Coq.MSets.MSetList <> s var
R2904:2907 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R2935:2943 Coq.MSets.MSetList X compare defax
R2972:2973 Coq.Init.Datatypes <> Lt constr
R2979:2982 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R2983:2986 Coq.MSets.MSetList <> diff def
R2990:2991 Coq.MSets.MSetList <> s' var
R3010:3011 Coq.Init.Datatypes <> Eq constr
R3016:3019 Coq.MSets.MSetList <> diff def
R3043:3044 Coq.Init.Datatypes <> Gt constr
R3049:3056 Coq.MSets.MSetList <> diff_aux var
def 3117:3121 Ops equal
R3128:3128 Coq.MSets.MSetList Ops t def
R3134:3137 Coq.Init.Logic <> :type_scope:x_'->'_x not
R3138:3141 Coq.Init.Datatypes <> bool ind
R3133:3133 Coq.MSets.MSetList Ops t def
R3159:3159 Coq.MSets.MSetList Ops t def
R3177:3178 Coq.MSets.MSetList <> s' var
R3174:3174 Coq.MSets.MSetList <> s var
R3191:3193 Coq.Init.Datatypes <> nil constr
R3196:3198 Coq.Init.Datatypes <> nil constr
R3203:3206 Coq.Init.Datatypes <> true constr
R3215:3218 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R3224:3227 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R3248:3256 Coq.MSets.MSetList X compare defax
R3278:3279 Coq.Init.Datatypes <> Eq constr
R3284:3288 Coq.MSets.MSetList <> equal def
R3310:3314 Coq.Init.Datatypes <> false constr
R3342:3346 Coq.Init.Datatypes <> false constr
def 3369:3374 Ops subset
R3397:3398 Coq.MSets.MSetList <> s' var
R3394:3394 Coq.MSets.MSetList <> s var
R3411:3413 Coq.Init.Datatypes <> nil constr
R3421:3424 Coq.Init.Datatypes <> true constr
R3433:3436 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R3442:3445 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R3466:3474 Coq.MSets.MSetList X compare defax
R3496:3497 Coq.Init.Datatypes <> Lt constr
R3502:3506 Coq.Init.Datatypes <> false constr
R3518:3519 Coq.Init.Datatypes <> Eq constr
R3524:3529 Coq.MSets.MSetList <> subset def
R3546:3547 Coq.Init.Datatypes <> Gt constr
R3552:3557 Coq.MSets.MSetList <> subset def
R3559:3559 Coq.MSets.MSetList <> s var
R3590:3594 Coq.Init.Datatypes <> false constr
def 3619:3622 Ops fold
R3643:3646 Coq.Init.Logic <> :type_scope:x_'->'_x not
R3648:3651 Coq.Init.Logic <> :type_scope:x_'->'_x not
R3652:3652 Coq.MSets.MSetList <> B var
R3647:3647 Coq.MSets.MSetList <> B var
R3640:3642 Coq.MSets.MSetList Ops elt def
R3660:3660 Coq.MSets.MSetList Ops t def
R3668:3668 Coq.MSets.MSetList <> B var
R3673:3673 Coq.MSets.MSetList <> B var
R3682:3690 Coq.Lists.List <> fold_left def
R3703:3703 Coq.MSets.MSetList <> i var
R3701:3701 Coq.MSets.MSetList <> s var
R3693:3696 Coq.Program.Basics <> flip def
R3698:3698 Coq.MSets.MSetList <> f var
def 3718:3723 Ops filter
R3733:3736 Coq.Init.Logic <> :type_scope:x_'->'_x not
R3737:3740 Coq.Init.Datatypes <> bool ind
R3730:3732 Coq.MSets.MSetList Ops elt def
R3748:3748 Coq.MSets.MSetList Ops t def
R3753:3753 Coq.MSets.MSetList Ops t def
R3768:3768 Coq.MSets.MSetList <> s var
R3781:3783 Coq.Init.Datatypes <> nil constr
R3788:3790 Coq.Init.Datatypes <> nil constr
R3799:3802 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R3811:3811 Coq.MSets.MSetList <> f var
R3841:3846 Coq.MSets.MSetList <> filter def
R3848:3848 Coq.MSets.MSetList <> f var
R3821:3824 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R3825:3830 Coq.MSets.MSetList <> filter def
R3832:3832 Coq.MSets.MSetList <> f var
def 3873:3879 Ops for_all
R3889:3892 Coq.Init.Logic <> :type_scope:x_'->'_x not
R3893:3896 Coq.Init.Datatypes <> bool ind
R3886:3888 Coq.MSets.MSetList Ops elt def
R3904:3904 Coq.MSets.MSetList Ops t def
R3909:3912 Coq.Init.Datatypes <> bool ind
R3927:3927 Coq.MSets.MSetList <> s var
R3940:3942 Coq.Init.Datatypes <> nil constr
R3947:3950 Coq.Init.Datatypes <> true constr
R3959:3962 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R3971:3971 Coq.MSets.MSetList <> f var
R3997:4001 Coq.Init.Datatypes <> false constr
R3980:3986 Coq.MSets.MSetList <> for_all def
R3988:3988 Coq.MSets.MSetList <> f var
def 4024:4030 Ops exists_
R4040:4043 Coq.Init.Logic <> :type_scope:x_'->'_x not
R4044:4047 Coq.Init.Datatypes <> bool ind
R4037:4039 Coq.MSets.MSetList Ops elt def
R4055:4055 Coq.MSets.MSetList Ops t def
R4060:4063 Coq.Init.Datatypes <> bool ind
R4078:4078 Coq.MSets.MSetList <> s var
R4091:4093 Coq.Init.Datatypes <> nil constr
R4098:4102 Coq.Init.Datatypes <> false constr
R4111:4114 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R4123:4123 Coq.MSets.MSetList <> f var
R4142:4148 Coq.MSets.MSetList <> exists_ def
R4150:4150 Coq.MSets.MSetList <> f var
R4132:4135 Coq.Init.Datatypes <> true constr
def 4175:4183 Ops partition
R4193:4196 Coq.Init.Logic <> :type_scope:x_'->'_x not
R4197:4200 Coq.Init.Datatypes <> bool ind
R4190:4192 Coq.MSets.MSetList Ops elt def
R4208:4208 Coq.MSets.MSetList Ops t def
R4214:4216 Coq.Init.Datatypes <> :type_scope:x_'*'_x not
R4213:4213 Coq.MSets.MSetList Ops t def
R4217:4217 Coq.MSets.MSetList Ops t def
R4232:4232 Coq.MSets.MSetList <> s var
R4245:4247 Coq.Init.Datatypes <> nil constr
R4252:4252 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4256:4257 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4261:4261 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4253:4255 Coq.Init.Datatypes <> nil constr
R4258:4260 Coq.Init.Datatypes <> nil constr
R4270:4273 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R4303:4311 Coq.MSets.MSetList <> partition def
R4313:4313 Coq.MSets.MSetList <> f var
R4331:4331 Coq.MSets.MSetList <> f var
R4359:4359 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4362:4363 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4371:4371 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4360:4361 Coq.MSets.MSetList <> s1 var
R4365:4368 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R4369:4370 Coq.MSets.MSetList <> s2 var
R4340:4340 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4348:4349 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4352:4352 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4342:4345 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R4346:4347 Coq.MSets.MSetList <> s1 var
R4350:4351 Coq.MSets.MSetList <> s2 var
def 4396:4403 Ops cardinal
R4410:4410 Coq.MSets.MSetList Ops t def
R4415:4417 Coq.Init.Datatypes <> nat ind
R4422:4427 Coq.Init.Datatypes <> length def
R4429:4429 Coq.MSets.MSetList <> s var
def 4446:4453 Ops elements
R4460:4460 Coq.MSets.MSetList Ops t def
R4465:4468 Coq.Init.Datatypes <> list ind
R4470:4472 Coq.MSets.MSetList Ops elt def
R4477:4477 Coq.MSets.MSetList <> x var
def 4494:4500 Ops min_elt
R4507:4507 Coq.MSets.MSetList Ops t def
R4512:4517 Coq.Init.Datatypes <> option ind
R4519:4521 Coq.MSets.MSetList Ops elt def
R4536:4536 Coq.MSets.MSetList <> s var
R4549:4551 Coq.Init.Datatypes <> nil constr
R4556:4559 Coq.Init.Datatypes <> None constr
R4568:4571 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R4577:4580 Coq.Init.Datatypes <> Some constr
def 4605:4611 Ops max_elt
R4618:4618 Coq.MSets.MSetList Ops t def
R4623:4628 Coq.Init.Datatypes <> option ind
R4630:4632 Coq.MSets.MSetList Ops elt def
R4647:4647 Coq.MSets.MSetList <> s var
R4660:4662 Coq.Init.Datatypes <> nil constr
R4667:4670 Coq.Init.Datatypes <> None constr
R4679:4682 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R4683:4685 Coq.Init.Datatypes <> nil constr
R4690:4693 Coq.Init.Datatypes <> Some constr
R4704:4707 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R4713:4719 Coq.MSets.MSetList <> max_elt def
def 4746:4751 Ops choose
R4756:4762 Coq.MSets.MSetList Ops min_elt def
def 4777:4783 Ops compare
R4805:4806 Coq.MSets.MSetList <> s' var
R4802:4802 Coq.MSets.MSetList <> s var
R4819:4821 Coq.Init.Datatypes <> nil constr
R4824:4826 Coq.Init.Datatypes <> nil constr
R4831:4832 Coq.Init.Datatypes <> Eq constr
R4840:4842 Coq.Init.Datatypes <> nil constr
R4850:4851 Coq.Init.Datatypes <> Lt constr
R4862:4864 Coq.Init.Datatypes <> nil constr
R4869:4870 Coq.Init.Datatypes <> Gt constr
R4879:4880 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R4886:4887 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R4906:4914 Coq.MSets.MSetList X compare defax
R4935:4936 Coq.Init.Datatypes <> Eq constr
R4941:4947 Coq.MSets.MSetList <> compare def
R4951:4952 Coq.MSets.MSetList <> s' var
R4949:4949 Coq.MSets.MSetList <> s var
R4963:4964 Coq.Init.Datatypes <> Lt constr
R4969:4970 Coq.Init.Datatypes <> Lt constr
R4981:4982 Coq.Init.Datatypes <> Gt constr
R4987:4988 Coq.Init.Datatypes <> Gt constr
R5013:5015 Coq.MSets.MSetList Ops <> mod
R5038:5048 Coq.Structures.Orders OrderedType <> mod
R5054:5060 Coq.MSets.MSetInterface RawSets <> mod
R5062:5062 Coq.MSets.MSetList X <> modtype
mod 5026:5032 <> MakeRaw
R5087:5102 Coq.Structures.OrdersFacts OrderedTypeFacts <> modtype
R5104:5104 Coq.MSets.MSetList X <> modtype
mod 5081:5082 <> MakeRaw.MX
R5129:5144 Coq.Structures.OrdersLists OrderedTypeLists <> modtype
R5146:5146 Coq.MSets.MSetList X <> modtype
mod 5123:5124 <> MakeRaw.ML
R5160:5162 Coq.MSets.MSetList Ops <> modtype
R5164:5164 Coq.MSets.MSetList X <> modtype
sec 5231:5242 MakeRaw ForNotations
def 5259:5261 MakeRaw inf
R5279:5279 Coq.MSets.MSetList <> l var
R5291:5293 Coq.Init.Datatypes <> nil constr
R5298:5301 Coq.Init.Datatypes <> true constr
R5309:5310 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R5322:5330 Coq.MSets.MSetList X compare defax
R5332:5332 Coq.MSets.MSetList <> x var
R5341:5342 Coq.Init.Datatypes <> Lt constr
R5347:5350 Coq.Init.Datatypes <> true constr
R5359:5363 Coq.Init.Datatypes <> false constr
def 5389:5392 MakeRaw isok
R5408:5408 Coq.MSets.MSetList <> l var
R5420:5422 Coq.Init.Datatypes <> nil constr
R5427:5430 Coq.Init.Datatypes <> true constr
R5438:5439 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R5452:5455 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R5445:5447 Coq.MSets.MSetList MakeRaw inf def
R5451:5451 Coq.MSets.MSetList <> l var
R5456:5459 Coq.MSets.MSetList <> isok def
R5461:5461 Coq.MSets.MSetList <> l var
syndef 5483:5486 MakeRaw Sort
R5500:5502 Coq.Init.Logic <> :type_scope:x_'='_x not
R5494:5497 Coq.MSets.MSetList MakeRaw isok def
R5503:5506 Coq.Init.Datatypes <> true constr
syndef 5521:5523 MakeRaw Inf
R5529:5535 Coq.Sorting.Sorted <> lelistA syndef
R5537:5540 Coq.MSets.MSetList X lt defax
syndef 5555:5556 MakeRaw In
R5562:5564 Coq.Lists.SetoidList <> InA ind
R5566:5569 Coq.MSets.MSetList X eq defax
def 5655:5658 MakeRaw IsOk
R5665:5668 Coq.MSets.MSetList MakeRaw Sort syndef
R5670:5670 Coq.MSets.MSetList <> s var
ind 5682:5683 MakeRaw Ok
constr 5701:5702 MakeRaw ok
rec 5682:5683 MakeRaw Ok
proj 5701:5702 MakeRaw ok
R5688:5688 Coq.MSets.MSetList MakeRaw t def
R5706:5709 Coq.MSets.MSetList MakeRaw Sort syndef
R5711:5711 Coq.MSets.MSetList <> s var
R5748:5749 Coq.MSets.MSetList MakeRaw Ok class
inst 5764:5770 MakeRaw Sort_Ok
R5781:5784 Coq.MSets.MSetList MakeRaw Sort syndef
R5786:5786 Coq.MSets.MSetList <> s var
R5791:5792 Coq.MSets.MSetList MakeRaw Ok class
R5794:5794 Coq.MSets.MSetList <> s var
R5801:5802 Coq.MSets.MSetList MakeRaw ok def
prf 5822:5828 MakeRaw inf_iff
R5851:5855 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R5844:5846 Coq.MSets.MSetList MakeRaw Inf syndef
R5850:5850 Coq.MSets.MSetList <> l var
R5848:5848 Coq.MSets.MSetList <> x var
R5863:5865 Coq.Init.Logic <> :type_scope:x_'='_x not
R5856:5858 Coq.MSets.MSetList MakeRaw inf def
R5862:5862 Coq.MSets.MSetList <> l var
R5860:5860 Coq.MSets.MSetList <> x var
R5866:5869 Coq.Init.Datatypes <> true constr
R5988:6001 Coq.MSets.MSetList MakeRaw compare_lt_iff thm
R5988:6001 Coq.MSets.MSetList MakeRaw compare_lt_iff thm
R5988:6001 Coq.MSets.MSetList MakeRaw compare_lt_iff thm
R6133:6141 Coq.MSets.MSetList X compare defax
R6133:6141 Coq.MSets.MSetList X compare defax
R6200:6213 Coq.MSets.MSetList MakeRaw compare_lt_iff thm
R6200:6213 Coq.MSets.MSetList MakeRaw compare_lt_iff thm
R6200:6213 Coq.MSets.MSetList MakeRaw compare_lt_iff thm
prf 6267:6274 MakeRaw isok_iff
R6299:6303 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R6288:6291 Coq.Sorting.Sorted <> sort syndef
R6298:6298 Coq.MSets.MSetList <> l var
R6293:6296 Coq.MSets.MSetList X lt defax
R6304:6305 Coq.MSets.MSetList MakeRaw Ok class
R6307:6307 Coq.MSets.MSetList <> l var
R6455:6457 Coq.Init.Logic <> :type_scope:x_'='_x not
R6444:6447 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R6436:6438 Coq.MSets.MSetList MakeRaw inf def
R6448:6451 Coq.MSets.MSetList MakeRaw isok def
R6458:6461 Coq.Init.Datatypes <> true constr
R6455:6457 Coq.Init.Logic <> :type_scope:x_'='_x not
R6444:6447 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R6436:6438 Coq.MSets.MSetList MakeRaw inf def
R6448:6451 Coq.MSets.MSetList MakeRaw isok def
R6458:6461 Coq.Init.Datatypes <> true constr
R6477:6483 Coq.MSets.MSetList MakeRaw inf_iff thm
R6477:6483 Coq.MSets.MSetList MakeRaw inf_iff thm
R6477:6483 Coq.MSets.MSetList MakeRaw inf_iff thm
R6504:6516 Coq.Bool.Bool <> andb_true_iff thm
R6504:6516 Coq.Bool.Bool <> andb_true_iff thm
R6504:6516 Coq.Bool.Bool <> andb_true_iff thm
R6617:6619 Coq.Init.Logic <> :type_scope:x_'='_x not
R6606:6609 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R6598:6600 Coq.MSets.MSetList MakeRaw inf def
R6610:6613 Coq.MSets.MSetList MakeRaw isok def
R6620:6623 Coq.Init.Datatypes <> true constr
R6617:6619 Coq.Init.Logic <> :type_scope:x_'='_x not
R6606:6609 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R6598:6600 Coq.MSets.MSetList MakeRaw inf def
R6610:6613 Coq.MSets.MSetList MakeRaw isok def
R6620:6623 Coq.Init.Datatypes <> true constr
R6644:6656 Coq.Bool.Bool <> andb_true_iff thm
R6662:6668 Coq.MSets.MSetList MakeRaw inf_iff thm
R6644:6656 Coq.Bool.Bool <> andb_true_iff thm
R6644:6656 Coq.Bool.Bool <> andb_true_iff thm
R6662:6668 Coq.MSets.MSetList MakeRaw inf_iff thm
R6662:6668 Coq.MSets.MSetList MakeRaw inf_iff thm
R6737:6738 Coq.MSets.MSetList MakeRaw Ok class
R6757:6764 Coq.MSets.MSetList MakeRaw isok_iff thm
R6808:6811 Coq.Sorting.Sorted <> sort syndef
R6820:6823 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R6813:6816 Coq.MSets.MSetList X lt defax
R6808:6811 Coq.Sorting.Sorted <> sort syndef
R6820:6823 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R6813:6816 Coq.MSets.MSetList X lt defax
R6868:6871 Coq.Sorting.Sorted <> sort syndef
R6878:6880 Coq.Init.Datatypes <> nil constr
R6873:6876 Coq.MSets.MSetList X lt defax
R6868:6871 Coq.Sorting.Sorted <> sort syndef
R6878:6880 Coq.Init.Datatypes <> nil constr
R6873:6876 Coq.MSets.MSetList X lt defax
R6913:6916 Coq.Sorting.Sorted <> sort syndef
R6918:6921 Coq.MSets.MSetList X lt defax
R6913:6916 Coq.Sorting.Sorted <> sort syndef
R6918:6921 Coq.MSets.MSetList X lt defax
R6968:6969 Coq.MSets.MSetList MakeRaw Ok class
R6968:6969 Coq.MSets.MSetList MakeRaw Ok class
R7022:7023 Coq.MSets.MSetList MakeRaw Ok class
R7022:7023 Coq.MSets.MSetList MakeRaw Ok class
R7041:7048 Coq.MSets.MSetList MakeRaw isok_iff thm
R6992:6999 Coq.MSets.MSetList MakeRaw isok_iff thm
R6942:6943 Coq.MSets.MSetList MakeRaw Ok class
R7215:7217 Coq.MSets.MSetList MakeRaw Inf syndef
R7215:7217 Coq.MSets.MSetList MakeRaw Inf syndef
R7229:7230 Coq.MSets.MSetList MakeRaw In syndef
R7229:7230 Coq.MSets.MSetList MakeRaw In syndef
R7256:7259 Coq.MSets.MSetList X lt defax
R7283:7293 Coq.MSets.MSetList MakeRaw Sort_Inf_In thm
inst 7350:7356 MakeRaw isok_Ok
R7368:7370 Coq.Init.Logic <> :type_scope:x_'='_x not
R7362:7365 Coq.MSets.MSetList MakeRaw isok def
R7367:7367 Coq.MSets.MSetList <> s var
R7371:7374 Coq.Init.Datatypes <> true constr
R7379:7380 Coq.MSets.MSetList MakeRaw Ok class
R7382:7382 Coq.MSets.MSetList <> s var
def 7442:7446 MakeRaw Equal
R7467:7469 Coq.MSets.MSetList MakeRaw elt def
R7478:7482 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R7472:7473 Coq.MSets.MSetList MakeRaw In syndef
R7477:7477 Coq.MSets.MSetList <> s var
R7475:7475 Coq.MSets.MSetList <> a var
R7483:7484 Coq.MSets.MSetList MakeRaw In syndef
R7488:7489 Coq.MSets.MSetList <> s' var
R7486:7486 Coq.MSets.MSetList <> a var
def 7505:7510 MakeRaw Subset
R7531:7533 Coq.MSets.MSetList MakeRaw elt def
R7542:7545 Coq.Init.Logic <> :type_scope:x_'->'_x not
R7546:7547 Coq.MSets.MSetList MakeRaw In syndef
R7551:7552 Coq.MSets.MSetList <> s' var
R7549:7549 Coq.MSets.MSetList <> a var
R7536:7537 Coq.MSets.MSetList MakeRaw In syndef
R7541:7541 Coq.MSets.MSetList <> s var
R7539:7539 Coq.MSets.MSetList <> a var
def 7568:7572 MakeRaw Empty
R7590:7592 Coq.MSets.MSetList MakeRaw elt def
R7595:7596 Coq.Init.Logic <> :type_scope:'~'_x not
R7597:7598 Coq.MSets.MSetList MakeRaw In syndef
R7602:7602 Coq.MSets.MSetList <> s var
R7600:7600 Coq.MSets.MSetList <> a var
def 7618:7624 MakeRaw For_all
R7634:7637 Coq.Init.Logic <> :type_scope:x_'->'_x not
R7631:7633 Coq.MSets.MSetList MakeRaw elt def
R7665:7668 Coq.Init.Logic <> :type_scope:x_'->'_x not
R7669:7669 Coq.MSets.MSetList <> P var
R7671:7671 Coq.MSets.MSetList <> x var
R7659:7660 Coq.MSets.MSetList MakeRaw In syndef
R7664:7664 Coq.MSets.MSetList <> s var
R7662:7662 Coq.MSets.MSetList <> x var
def 7687:7692 MakeRaw Exists
R7702:7705 Coq.Init.Logic <> :type_scope:x_'->'_x not
R7699:7701 Coq.MSets.MSetList MakeRaw elt def
R7717:7717 Coq.MSets.MSetList MakeRaw t def
R7723:7729 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R7731:7732 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R7739:7742 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R7733:7734 Coq.MSets.MSetList MakeRaw In syndef
R7738:7738 Coq.MSets.MSetList <> s var
R7736:7736 Coq.MSets.MSetList <> x var
R7743:7743 Coq.MSets.MSetList <> P var
R7745:7745 Coq.MSets.MSetList <> x var
prf 7757:7764 MakeRaw mem_spec
R7783:7783 Coq.MSets.MSetList MakeRaw t def
R7791:7793 Coq.MSets.MSetList MakeRaw elt def
R7802:7803 Coq.MSets.MSetList MakeRaw Ok class
R7805:7805 Coq.MSets.MSetList <> s var
R7823:7827 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R7816:7818 Coq.Init.Logic <> :type_scope:x_'='_x not
R7809:7811 Coq.MSets.MSetList MakeRaw mem def
R7815:7815 Coq.MSets.MSetList <> s var
R7813:7813 Coq.MSets.MSetList <> x var
R7819:7822 Coq.Init.Datatypes <> true constr
R7828:7829 Coq.MSets.MSetList MakeRaw In syndef
R7833:7833 Coq.MSets.MSetList <> s var
R7831:7831 Coq.MSets.MSetList <> x var
R7945:7952 Coq.Lists.SetoidList <> InA_cons thm
R7945:7952 Coq.Lists.SetoidList <> InA_cons thm
R7945:7952 Coq.Lists.SetoidList <> InA_cons thm
R7945:7952 Coq.Lists.SetoidList <> InA_cons thm
R7945:7952 Coq.Lists.SetoidList <> InA_cons thm
R7945:7952 Coq.Lists.SetoidList <> InA_cons thm
R7945:7952 Coq.Lists.SetoidList <> InA_cons thm
prf 8076:8082 MakeRaw add_inf
R8101:8101 Coq.MSets.MSetList MakeRaw t def
R8111:8113 Coq.MSets.MSetList MakeRaw elt def
R8124:8127 Coq.Init.Logic <> :type_scope:x_'->'_x not
R8136:8139 Coq.Init.Logic <> :type_scope:x_'->'_x not
R8140:8142 Coq.MSets.MSetList MakeRaw Inf syndef
R8147:8149 Coq.MSets.MSetList MakeRaw add def
R8153:8153 Coq.MSets.MSetList <> s var
R8151:8151 Coq.MSets.MSetList <> x var
R8144:8144 Coq.MSets.MSetList <> a var
R8128:8131 Coq.MSets.MSetList X lt defax
R8135:8135 Coq.MSets.MSetList <> x var
R8133:8133 Coq.MSets.MSetList <> a var
R8117:8119 Coq.MSets.MSetList MakeRaw Inf syndef
R8123:8123 Coq.MSets.MSetList <> s var
R8121:8121 Coq.MSets.MSetList <> a var
inst 8302:8307 MakeRaw add_ok
R8324:8325 Coq.MSets.MSetList MakeRaw Ok class
R8327:8327 Coq.MSets.MSetList <> s var
R8331:8332 Coq.MSets.MSetList MakeRaw Ok class
R8335:8337 Coq.MSets.MSetList MakeRaw add def
R8341:8341 Coq.MSets.MSetList <> s var
R8339:8339 Coq.MSets.MSetList <> x var
R8374:8381 Coq.MSets.MSetList MakeRaw isok_iff thm
R8374:8381 Coq.MSets.MSetList MakeRaw isok_iff thm
R8374:8381 Coq.MSets.MSetList MakeRaw isok_iff thm
R8374:8381 Coq.MSets.MSetList MakeRaw isok_iff thm
R8374:8381 Coq.MSets.MSetList MakeRaw isok_iff thm
R8374:8381 Coq.MSets.MSetList MakeRaw isok_iff thm
prf 8493:8500 MakeRaw add_spec
R8519:8519 Coq.MSets.MSetList MakeRaw t def
R8529:8531 Coq.MSets.MSetList MakeRaw elt def
R8540:8541 Coq.MSets.MSetList MakeRaw Ok class
R8543:8543 Coq.MSets.MSetList <> s var
R8565:8569 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R8551:8552 Coq.MSets.MSetList MakeRaw In syndef
R8557:8559 Coq.MSets.MSetList MakeRaw add def
R8563:8563 Coq.MSets.MSetList <> s var
R8561:8561 Coq.MSets.MSetList <> x var
R8554:8554 Coq.MSets.MSetList <> y var
R8578:8581 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R8570:8573 Coq.MSets.MSetList X eq defax
R8577:8577 Coq.MSets.MSetList <> x var
R8575:8575 Coq.MSets.MSetList <> y var
R8582:8583 Coq.MSets.MSetList MakeRaw In syndef
R8587:8587 Coq.MSets.MSetList <> s var
R8585:8585 Coq.MSets.MSetList <> y var
R8687:8694 Coq.Lists.SetoidList <> InA_cons thm
R8687:8694 Coq.Lists.SetoidList <> InA_cons thm
R8687:8694 Coq.Lists.SetoidList <> InA_cons thm
R8687:8694 Coq.Lists.SetoidList <> InA_cons thm
R8687:8694 Coq.Lists.SetoidList <> InA_cons thm
R8687:8694 Coq.Lists.SetoidList <> InA_cons thm
R8687:8694 Coq.Lists.SetoidList <> InA_cons thm
R8687:8694 Coq.Lists.SetoidList <> InA_cons thm
R8687:8694 Coq.Lists.SetoidList <> InA_cons thm
R8687:8694 Coq.Lists.SetoidList <> InA_cons thm
R8687:8694 Coq.Lists.SetoidList <> InA_cons thm
R8687:8694 Coq.Lists.SetoidList <> InA_cons thm
prf 8730:8739 MakeRaw remove_inf
R8758:8758 Coq.MSets.MSetList MakeRaw t def
R8768:8770 Coq.MSets.MSetList MakeRaw elt def
R8779:8780 Coq.MSets.MSetList MakeRaw Ok class
R8782:8782 Coq.MSets.MSetList <> s var
R8793:8796 Coq.Init.Logic <> :type_scope:x_'->'_x not
R8797:8799 Coq.MSets.MSetList MakeRaw Inf syndef
R8804:8809 Coq.MSets.MSetList MakeRaw remove def
R8813:8813 Coq.MSets.MSetList <> s var
R8811:8811 Coq.MSets.MSetList <> x var
R8801:8801 Coq.MSets.MSetList <> a var
R8786:8788 Coq.MSets.MSetList MakeRaw Inf syndef
R8792:8792 Coq.MSets.MSetList <> s var
R8790:8790 Coq.MSets.MSetList <> a var
R8908:8913 Coq.MSets.MSetList MakeRaw Inf_lt thm
R8908:8913 Coq.MSets.MSetList MakeRaw Inf_lt thm
inst 8982:8990 MakeRaw remove_ok
R9007:9008 Coq.MSets.MSetList MakeRaw Ok class
R9010:9010 Coq.MSets.MSetList <> s var
R9014:9015 Coq.MSets.MSetList MakeRaw Ok class
R9018:9023 Coq.MSets.MSetList MakeRaw remove def
R9027:9027 Coq.MSets.MSetList <> s var
R9025:9025 Coq.MSets.MSetList <> x var
R9060:9067 Coq.MSets.MSetList MakeRaw isok_iff thm
R9060:9067 Coq.MSets.MSetList MakeRaw isok_iff thm
R9060:9067 Coq.MSets.MSetList MakeRaw isok_iff thm
R9060:9067 Coq.MSets.MSetList MakeRaw isok_iff thm
R9060:9067 Coq.MSets.MSetList MakeRaw isok_iff thm
R9060:9067 Coq.MSets.MSetList MakeRaw isok_iff thm
prf 9172:9182 MakeRaw remove_spec
R9201:9201 Coq.MSets.MSetList MakeRaw t def
R9211:9213 Coq.MSets.MSetList MakeRaw elt def
R9222:9223 Coq.MSets.MSetList MakeRaw Ok class
R9225:9225 Coq.MSets.MSetList <> s var
R9250:9254 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R9233:9234 Coq.MSets.MSetList MakeRaw In syndef
R9239:9244 Coq.MSets.MSetList MakeRaw remove def
R9248:9248 Coq.MSets.MSetList <> s var
R9246:9246 Coq.MSets.MSetList <> x var
R9236:9236 Coq.MSets.MSetList <> y var
R9261:9264 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R9255:9256 Coq.MSets.MSetList MakeRaw In syndef
R9260:9260 Coq.MSets.MSetList <> s var
R9258:9258 Coq.MSets.MSetList <> y var
R9265:9265 Coq.Init.Logic <> :type_scope:'~'_x not
R9266:9269 Coq.MSets.MSetList X eq defax
R9273:9273 Coq.MSets.MSetList <> x var
R9271:9271 Coq.MSets.MSetList <> y var
R9373:9380 Coq.Lists.SetoidList <> InA_cons thm
R9373:9380 Coq.Lists.SetoidList <> InA_cons thm
R9373:9380 Coq.Lists.SetoidList <> InA_cons thm
R9373:9380 Coq.Lists.SetoidList <> InA_cons thm
R9373:9380 Coq.Lists.SetoidList <> InA_cons thm
R9373:9380 Coq.Lists.SetoidList <> InA_cons thm
R9373:9380 Coq.Lists.SetoidList <> InA_cons thm
R9373:9380 Coq.Lists.SetoidList <> InA_cons thm
R9373:9380 Coq.Lists.SetoidList <> InA_cons thm
R9373:9380 Coq.Lists.SetoidList <> InA_cons thm
R9373:9380 Coq.Lists.SetoidList <> InA_cons thm
inst 9457:9468 MakeRaw singleton_ok
R9474:9475 Coq.MSets.MSetList MakeRaw Ok class
R9478:9486 Coq.MSets.MSetList MakeRaw singleton def
R9488:9488 Coq.MSets.MSetList <> x var
R9510:9518 Coq.MSets.MSetList MakeRaw singleton def
prf 9550:9563 MakeRaw singleton_spec
R9580:9582 Coq.MSets.MSetList MakeRaw elt def
R9603:9607 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R9585:9586 Coq.MSets.MSetList MakeRaw In syndef
R9591:9599 Coq.MSets.MSetList MakeRaw singleton def
R9601:9601 Coq.MSets.MSetList <> x var
R9588:9588 Coq.MSets.MSetList <> y var
R9608:9611 Coq.MSets.MSetList X eq defax
R9615:9615 Coq.MSets.MSetList <> x var
R9613:9613 Coq.MSets.MSetList <> y var
R9636:9644 Coq.MSets.MSetList MakeRaw singleton def
prf 9960:9968 MakeRaw union_inf
R9990:9990 Coq.MSets.MSetList MakeRaw t def
R9998:10000 Coq.MSets.MSetList MakeRaw elt def
R10009:10010 Coq.MSets.MSetList MakeRaw Ok class
R10012:10012 Coq.MSets.MSetList <> s var
R10022:10023 Coq.MSets.MSetList MakeRaw Ok class
R10025:10026 Coq.MSets.MSetList <> s' var
R10040:10043 Coq.Init.Logic <> :type_scope:x_'->'_x not
R10052:10055 Coq.Init.Logic <> :type_scope:x_'->'_x not
R10056:10058 Coq.MSets.MSetList MakeRaw Inf syndef
R10063:10067 Coq.MSets.MSetList MakeRaw union def
R10071:10072 Coq.MSets.MSetList <> s' var
R10069:10069 Coq.MSets.MSetList <> s var
R10060:10060 Coq.MSets.MSetList <> a var
R10044:10046 Coq.MSets.MSetList MakeRaw Inf syndef
R10050:10051 Coq.MSets.MSetList <> s' var
R10048:10048 Coq.MSets.MSetList <> a var
R10033:10035 Coq.MSets.MSetList MakeRaw Inf syndef
R10039:10039 Coq.MSets.MSetList <> s var
R10037:10037 Coq.MSets.MSetList <> a var
inst 10151:10158 MakeRaw union_ok
R10176:10177 Coq.MSets.MSetList MakeRaw Ok class
R10179:10179 Coq.MSets.MSetList <> s var
R10182:10183 Coq.MSets.MSetList MakeRaw Ok class
R10185:10186 Coq.MSets.MSetList <> s' var
R10190:10191 Coq.MSets.MSetList MakeRaw Ok class
R10194:10198 Coq.MSets.MSetList MakeRaw union def
R10202:10203 Coq.MSets.MSetList <> s' var
R10200:10200 Coq.MSets.MSetList <> s var
R10236:10243 Coq.MSets.MSetList MakeRaw isok_iff thm
R10236:10243 Coq.MSets.MSetList MakeRaw isok_iff thm
R10236:10243 Coq.MSets.MSetList MakeRaw isok_iff thm
R10236:10243 Coq.MSets.MSetList MakeRaw isok_iff thm
R10236:10243 Coq.MSets.MSetList MakeRaw isok_iff thm
R10236:10243 Coq.MSets.MSetList MakeRaw isok_iff thm
R10236:10243 Coq.MSets.MSetList MakeRaw isok_iff thm
R10236:10243 Coq.MSets.MSetList MakeRaw isok_iff thm
R10298:10299 Coq.MSets.MSetList MakeRaw ok def
R10298:10299 Coq.MSets.MSetList MakeRaw ok def
R10298:10299 Coq.MSets.MSetList MakeRaw ok def
R10298:10299 Coq.MSets.MSetList MakeRaw ok def
R10298:10299 Coq.MSets.MSetList MakeRaw ok def
R10317:10322 Coq.MSets.MSetList MakeRaw Inf_eq thm
R10345:10353 Coq.MSets.MSetList MakeRaw union_inf thm
R10368:10373 Coq.MSets.MSetList MakeRaw Inf_eq thm
R10317:10322 Coq.MSets.MSetList MakeRaw Inf_eq thm
R10345:10353 Coq.MSets.MSetList MakeRaw union_inf thm
R10368:10373 Coq.MSets.MSetList MakeRaw Inf_eq thm
R10406:10408 Coq.MSets.MSetList MakeRaw Inf syndef
R10414:10418 Coq.MSets.MSetList MakeRaw union def
R10422:10425 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R10406:10408 Coq.MSets.MSetList MakeRaw Inf syndef
R10414:10418 Coq.MSets.MSetList MakeRaw union def
R10422:10425 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
prf 10457:10466 MakeRaw union_spec
R10488:10488 Coq.MSets.MSetList MakeRaw t def
R10496:10498 Coq.MSets.MSetList MakeRaw elt def
R10507:10508 Coq.MSets.MSetList MakeRaw Ok class
R10510:10510 Coq.MSets.MSetList <> s var
R10520:10521 Coq.MSets.MSetList MakeRaw Ok class
R10523:10524 Coq.MSets.MSetList <> s' var
R10548:10552 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R10531:10532 Coq.MSets.MSetList MakeRaw In syndef
R10537:10541 Coq.MSets.MSetList MakeRaw union def
R10545:10546 Coq.MSets.MSetList <> s' var
R10543:10543 Coq.MSets.MSetList <> s var
R10534:10534 Coq.MSets.MSetList <> x var
R10559:10562 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R10553:10554 Coq.MSets.MSetList MakeRaw In syndef
R10558:10558 Coq.MSets.MSetList <> s var
R10556:10556 Coq.MSets.MSetList <> x var
R10563:10564 Coq.MSets.MSetList MakeRaw In syndef
R10568:10569 Coq.MSets.MSetList <> s' var
R10566:10566 Coq.MSets.MSetList <> x var
R10608:10615 Coq.Lists.SetoidList <> InA_cons thm
R10608:10615 Coq.Lists.SetoidList <> InA_cons thm
R10608:10615 Coq.Lists.SetoidList <> InA_cons thm
R10608:10615 Coq.Lists.SetoidList <> InA_cons thm
R10608:10615 Coq.Lists.SetoidList <> InA_cons thm
R10608:10615 Coq.Lists.SetoidList <> InA_cons thm
R10608:10615 Coq.Lists.SetoidList <> InA_cons thm
R10608:10615 Coq.Lists.SetoidList <> InA_cons thm
R10608:10615 Coq.Lists.SetoidList <> InA_cons thm
R10608:10615 Coq.Lists.SetoidList <> InA_cons thm
R10608:10615 Coq.Lists.SetoidList <> InA_cons thm
R10608:10615 Coq.Lists.SetoidList <> InA_cons thm
R10608:10615 Coq.Lists.SetoidList <> InA_cons thm
R10608:10615 Coq.Lists.SetoidList <> InA_cons thm
R10608:10615 Coq.Lists.SetoidList <> InA_cons thm
R10608:10615 Coq.Lists.SetoidList <> InA_cons thm
R10608:10615 Coq.Lists.SetoidList <> InA_cons thm
R10608:10615 Coq.Lists.SetoidList <> InA_cons thm
R10608:10615 Coq.Lists.SetoidList <> InA_cons thm
R10608:10615 Coq.Lists.SetoidList <> InA_cons thm
prf 10671:10679 MakeRaw inter_inf
R10701:10701 Coq.MSets.MSetList MakeRaw t def
R10709:10711 Coq.MSets.MSetList MakeRaw elt def
R10720:10721 Coq.MSets.MSetList MakeRaw Ok class
R10723:10723 Coq.MSets.MSetList <> s var
R10733:10734 Coq.MSets.MSetList MakeRaw Ok class
R10736:10737 Coq.MSets.MSetList <> s' var
R10751:10754 Coq.Init.Logic <> :type_scope:x_'->'_x not
R10763:10766 Coq.Init.Logic <> :type_scope:x_'->'_x not
R10767:10769 Coq.MSets.MSetList MakeRaw Inf syndef
R10774:10778 Coq.MSets.MSetList MakeRaw inter def
R10782:10783 Coq.MSets.MSetList <> s' var
R10780:10780 Coq.MSets.MSetList <> s var
R10771:10771 Coq.MSets.MSetList <> a var
R10755:10757 Coq.MSets.MSetList MakeRaw Inf syndef
R10761:10762 Coq.MSets.MSetList <> s' var
R10759:10759 Coq.MSets.MSetList <> a var
R10744:10746 Coq.MSets.MSetList MakeRaw Inf syndef
R10750:10750 Coq.MSets.MSetList <> s var
R10748:10748 Coq.MSets.MSetList <> a var
R10818:10823 Coq.MSets.MSetList MakeRaw Inf_lt thm
R10818:10823 Coq.MSets.MSetList MakeRaw Inf_lt thm
R10868:10873 Coq.MSets.MSetList MakeRaw Inf_lt thm
R10868:10873 Coq.MSets.MSetList MakeRaw Inf_lt thm
inst 10942:10949 MakeRaw inter_ok
R10967:10968 Coq.MSets.MSetList MakeRaw Ok class
R10970:10970 Coq.MSets.MSetList <> s var
R10973:10974 Coq.MSets.MSetList MakeRaw Ok class
R10976:10977 Coq.MSets.MSetList <> s' var
R10981:10982 Coq.MSets.MSetList MakeRaw Ok class
R10985:10989 Coq.MSets.MSetList MakeRaw inter def
R10993:10994 Coq.MSets.MSetList <> s' var
R10991:10991 Coq.MSets.MSetList <> s var
R11027:11034 Coq.MSets.MSetList MakeRaw isok_iff thm
R11027:11034 Coq.MSets.MSetList MakeRaw isok_iff thm
R11027:11034 Coq.MSets.MSetList MakeRaw isok_iff thm
R11027:11034 Coq.MSets.MSetList MakeRaw isok_iff thm
R11027:11034 Coq.MSets.MSetList MakeRaw isok_iff thm
R11027:11034 Coq.MSets.MSetList MakeRaw isok_iff thm
R11027:11034 Coq.MSets.MSetList MakeRaw isok_iff thm
R11027:11034 Coq.MSets.MSetList MakeRaw isok_iff thm
R11094:11099 Coq.MSets.MSetList MakeRaw Inf_eq thm
R11122:11130 Coq.MSets.MSetList MakeRaw inter_inf thm
R11145:11150 Coq.MSets.MSetList MakeRaw Inf_eq thm
R11094:11099 Coq.MSets.MSetList MakeRaw Inf_eq thm
R11122:11130 Coq.MSets.MSetList MakeRaw inter_inf thm
R11145:11150 Coq.MSets.MSetList MakeRaw Inf_eq thm
prf 11182:11191 MakeRaw inter_spec
R11213:11213 Coq.MSets.MSetList MakeRaw t def
R11221:11223 Coq.MSets.MSetList MakeRaw elt def
R11232:11233 Coq.MSets.MSetList MakeRaw Ok class
R11235:11235 Coq.MSets.MSetList <> s var
R11245:11246 Coq.MSets.MSetList MakeRaw Ok class
R11248:11249 Coq.MSets.MSetList <> s' var
R11273:11277 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R11256:11257 Coq.MSets.MSetList MakeRaw In syndef
R11262:11266 Coq.MSets.MSetList MakeRaw inter def
R11270:11271 Coq.MSets.MSetList <> s' var
R11268:11268 Coq.MSets.MSetList <> s var
R11259:11259 Coq.MSets.MSetList <> x var
R11284:11287 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R11278:11279 Coq.MSets.MSetList MakeRaw In syndef
R11283:11283 Coq.MSets.MSetList <> s var
R11281:11281 Coq.MSets.MSetList <> x var
R11288:11289 Coq.MSets.MSetList MakeRaw In syndef
R11293:11294 Coq.MSets.MSetList <> s' var
R11291:11291 Coq.MSets.MSetList <> x var
R11333:11340 Coq.Lists.SetoidList <> InA_cons thm
R11333:11340 Coq.Lists.SetoidList <> InA_cons thm
R11333:11340 Coq.Lists.SetoidList <> InA_cons thm
R11333:11340 Coq.Lists.SetoidList <> InA_cons thm
R11333:11340 Coq.Lists.SetoidList <> InA_cons thm
R11333:11340 Coq.Lists.SetoidList <> InA_cons thm
R11333:11340 Coq.Lists.SetoidList <> InA_cons thm
R11333:11340 Coq.Lists.SetoidList <> InA_cons thm
R11333:11340 Coq.Lists.SetoidList <> InA_cons thm
R11333:11340 Coq.Lists.SetoidList <> InA_cons thm
R11333:11340 Coq.Lists.SetoidList <> InA_cons thm
R11333:11340 Coq.Lists.SetoidList <> InA_cons thm
R11333:11340 Coq.Lists.SetoidList <> InA_cons thm
R11333:11340 Coq.Lists.SetoidList <> InA_cons thm
R11333:11340 Coq.Lists.SetoidList <> InA_cons thm
R11333:11340 Coq.Lists.SetoidList <> InA_cons thm
R11333:11340 Coq.Lists.SetoidList <> InA_cons thm
R11333:11340 Coq.Lists.SetoidList <> InA_cons thm
prf 11427:11434 MakeRaw diff_inf
R11456:11456 Coq.MSets.MSetList MakeRaw t def
R11465:11466 Coq.MSets.MSetList MakeRaw Ok class
R11468:11468 Coq.MSets.MSetList <> s var
R11478:11479 Coq.MSets.MSetList MakeRaw Ok class
R11481:11482 Coq.MSets.MSetList <> s' var
R11490:11492 Coq.MSets.MSetList MakeRaw elt def
R11506:11509 Coq.Init.Logic <> :type_scope:x_'->'_x not
R11518:11521 Coq.Init.Logic <> :type_scope:x_'->'_x not
R11522:11524 Coq.MSets.MSetList MakeRaw Inf syndef
R11529:11532 Coq.MSets.MSetList MakeRaw diff def
R11536:11537 Coq.MSets.MSetList <> s' var
R11534:11534 Coq.MSets.MSetList <> s var
R11526:11526 Coq.MSets.MSetList <> a var
R11510:11512 Coq.MSets.MSetList MakeRaw Inf syndef
R11516:11517 Coq.MSets.MSetList <> s' var
R11514:11514 Coq.MSets.MSetList <> a var
R11499:11501 Coq.MSets.MSetList MakeRaw Inf syndef
R11505:11505 Coq.MSets.MSetList <> s var
R11503:11503 Coq.MSets.MSetList <> a var
R11583:11590 Coq.MSets.MSetList MakeRaw isok_iff thm
R11583:11590 Coq.MSets.MSetList MakeRaw isok_iff thm
R11583:11590 Coq.MSets.MSetList MakeRaw isok_iff thm
R11583:11590 Coq.MSets.MSetList MakeRaw isok_iff thm
R11583:11590 Coq.MSets.MSetList MakeRaw isok_iff thm
R11583:11590 Coq.MSets.MSetList MakeRaw isok_iff thm
R11651:11656 Coq.MSets.MSetList MakeRaw Inf_lt thm
R11651:11656 Coq.MSets.MSetList MakeRaw Inf_lt thm
R11680:11685 Coq.MSets.MSetList MakeRaw Inf_lt thm
R11680:11685 Coq.MSets.MSetList MakeRaw Inf_lt thm
R11731:11736 Coq.MSets.MSetList MakeRaw Inf_lt thm
R11731:11736 Coq.MSets.MSetList MakeRaw Inf_lt thm
inst 11804:11810 MakeRaw diff_ok
R11828:11829 Coq.MSets.MSetList MakeRaw Ok class
R11831:11831 Coq.MSets.MSetList <> s var
R11834:11835 Coq.MSets.MSetList MakeRaw Ok class
R11837:11838 Coq.MSets.MSetList <> s' var
R11842:11843 Coq.MSets.MSetList MakeRaw Ok class
R11846:11849 Coq.MSets.MSetList MakeRaw diff def
R11853:11854 Coq.MSets.MSetList <> s' var
R11851:11851 Coq.MSets.MSetList <> s var
R11887:11894 Coq.MSets.MSetList MakeRaw isok_iff thm
R11887:11894 Coq.MSets.MSetList MakeRaw isok_iff thm
R11887:11894 Coq.MSets.MSetList MakeRaw isok_iff thm
R11887:11894 Coq.MSets.MSetList MakeRaw isok_iff thm
R11887:11894 Coq.MSets.MSetList MakeRaw isok_iff thm
R11887:11894 Coq.MSets.MSetList MakeRaw isok_iff thm
R11887:11894 Coq.MSets.MSetList MakeRaw isok_iff thm
R11887:11894 Coq.MSets.MSetList MakeRaw isok_iff thm
prf 11940:11948 MakeRaw diff_spec
R11970:11970 Coq.MSets.MSetList MakeRaw t def
R11978:11980 Coq.MSets.MSetList MakeRaw elt def
R11989:11990 Coq.MSets.MSetList MakeRaw Ok class
R11992:11992 Coq.MSets.MSetList <> s var
R12002:12003 Coq.MSets.MSetList MakeRaw Ok class
R12005:12006 Coq.MSets.MSetList <> s' var
R12029:12033 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R12013:12014 Coq.MSets.MSetList MakeRaw In syndef
R12019:12022 Coq.MSets.MSetList MakeRaw diff def
R12026:12027 Coq.MSets.MSetList <> s' var
R12024:12024 Coq.MSets.MSetList <> s var
R12016:12016 Coq.MSets.MSetList <> x var
R12040:12043 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R12034:12035 Coq.MSets.MSetList MakeRaw In syndef
R12039:12039 Coq.MSets.MSetList <> s var
R12037:12037 Coq.MSets.MSetList <> x var
R12044:12044 Coq.Init.Logic <> :type_scope:'~'_x not
R12045:12046 Coq.MSets.MSetList MakeRaw In syndef
R12050:12051 Coq.MSets.MSetList <> s' var
R12048:12048 Coq.MSets.MSetList <> x var
R12090:12097 Coq.Lists.SetoidList <> InA_cons thm
R12090:12097 Coq.Lists.SetoidList <> InA_cons thm
R12090:12097 Coq.Lists.SetoidList <> InA_cons thm
R12090:12097 Coq.Lists.SetoidList <> InA_cons thm
R12090:12097 Coq.Lists.SetoidList <> InA_cons thm
R12090:12097 Coq.Lists.SetoidList <> InA_cons thm
R12090:12097 Coq.Lists.SetoidList <> InA_cons thm
R12090:12097 Coq.Lists.SetoidList <> InA_cons thm
R12090:12097 Coq.Lists.SetoidList <> InA_cons thm
R12090:12097 Coq.Lists.SetoidList <> InA_cons thm
R12090:12097 Coq.Lists.SetoidList <> InA_cons thm
R12090:12097 Coq.Lists.SetoidList <> InA_cons thm
R12090:12097 Coq.Lists.SetoidList <> InA_cons thm
R12090:12097 Coq.Lists.SetoidList <> InA_cons thm
R12090:12097 Coq.Lists.SetoidList <> InA_cons thm
R12090:12097 Coq.Lists.SetoidList <> InA_cons thm
R12090:12097 Coq.Lists.SetoidList <> InA_cons thm
R12090:12097 Coq.Lists.SetoidList <> InA_cons thm
prf 12215:12224 MakeRaw equal_spec
R12246:12246 Coq.MSets.MSetList MakeRaw t def
R12255:12256 Coq.MSets.MSetList MakeRaw Ok class
R12258:12258 Coq.MSets.MSetList <> s var
R12268:12269 Coq.MSets.MSetList MakeRaw Ok class
R12271:12272 Coq.MSets.MSetList <> s' var
R12296:12300 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R12289:12291 Coq.Init.Logic <> :type_scope:x_'='_x not
R12279:12283 Coq.MSets.MSetList MakeRaw equal def
R12287:12288 Coq.MSets.MSetList <> s' var
R12285:12285 Coq.MSets.MSetList <> s var
R12292:12295 Coq.Init.Datatypes <> true constr
R12301:12305 Coq.MSets.MSetList MakeRaw Equal def
R12309:12310 Coq.MSets.MSetList <> s' var
R12307:12307 Coq.MSets.MSetList <> s var
R12452:12453 Coq.MSets.MSetList MakeRaw In syndef
R12458:12460 Coq.Init.Datatypes <> nil constr
R12452:12453 Coq.MSets.MSetList MakeRaw In syndef
R12458:12460 Coq.Init.Datatypes <> nil constr
R12531:12532 Coq.MSets.MSetList MakeRaw In syndef
R12536:12538 Coq.Init.Datatypes <> nil constr
R12531:12532 Coq.MSets.MSetList MakeRaw In syndef
R12536:12538 Coq.Init.Datatypes <> nil constr
R12704:12711 Coq.Lists.SetoidList <> InA_cons thm
R12704:12711 Coq.Lists.SetoidList <> InA_cons thm
R12704:12711 Coq.Lists.SetoidList <> InA_cons thm
R12704:12711 Coq.Lists.SetoidList <> InA_cons thm
R12704:12711 Coq.Lists.SetoidList <> InA_cons thm
R12742:12749 Coq.Lists.SetoidList <> InA_cons thm
R12742:12749 Coq.Lists.SetoidList <> InA_cons thm
R12742:12749 Coq.Lists.SetoidList <> InA_cons thm
R12742:12749 Coq.Lists.SetoidList <> InA_cons thm
R12742:12749 Coq.Lists.SetoidList <> InA_cons thm
R12851:12852 Coq.MSets.MSetList MakeRaw In syndef
R12859:12860 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R12851:12852 Coq.MSets.MSetList MakeRaw In syndef
R12859:12860 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R12978:12979 Coq.MSets.MSetList MakeRaw In syndef
R12986:12987 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R12978:12979 Coq.MSets.MSetList MakeRaw In syndef
R12986:12987 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
prf 13061:13071 MakeRaw subset_spec
R13093:13093 Coq.MSets.MSetList MakeRaw t def
R13102:13103 Coq.MSets.MSetList MakeRaw Ok class
R13105:13105 Coq.MSets.MSetList <> s var
R13115:13116 Coq.MSets.MSetList MakeRaw Ok class
R13118:13119 Coq.MSets.MSetList <> s' var
R13144:13148 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R13137:13139 Coq.Init.Logic <> :type_scope:x_'='_x not
R13126:13131 Coq.MSets.MSetList MakeRaw subset def
R13135:13136 Coq.MSets.MSetList <> s' var
R13133:13133 Coq.MSets.MSetList <> s var
R13140:13143 Coq.Init.Datatypes <> true constr
R13149:13154 Coq.MSets.MSetList MakeRaw Subset def
R13158:13159 Coq.MSets.MSetList <> s' var
R13156:13156 Coq.MSets.MSetList <> s var
R13339:13340 Coq.MSets.MSetList MakeRaw In syndef
R13344:13346 Coq.Init.Datatypes <> nil constr
R13339:13340 Coq.MSets.MSetList MakeRaw In syndef
R13344:13346 Coq.Init.Datatypes <> nil constr
R13525:13532 Coq.Lists.SetoidList <> InA_cons thm
R13525:13532 Coq.Lists.SetoidList <> InA_cons thm
R13525:13532 Coq.Lists.SetoidList <> InA_cons thm
R13525:13532 Coq.Lists.SetoidList <> InA_cons thm
R13525:13532 Coq.Lists.SetoidList <> InA_cons thm
R13560:13567 Coq.Lists.SetoidList <> InA_cons thm
R13560:13567 Coq.Lists.SetoidList <> InA_cons thm
R13560:13567 Coq.Lists.SetoidList <> InA_cons thm
R13560:13567 Coq.Lists.SetoidList <> InA_cons thm
R13560:13567 Coq.Lists.SetoidList <> InA_cons thm
R13669:13670 Coq.MSets.MSetList MakeRaw In syndef
R13677:13678 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R13669:13670 Coq.MSets.MSetList MakeRaw In syndef
R13677:13678 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R13818:13825 Coq.Lists.SetoidList <> InA_cons thm
R13818:13825 Coq.Lists.SetoidList <> InA_cons thm
R13818:13825 Coq.Lists.SetoidList <> InA_cons thm
R13818:13825 Coq.Lists.SetoidList <> InA_cons thm
R13818:13825 Coq.Lists.SetoidList <> InA_cons thm
R13850:13857 Coq.Lists.SetoidList <> InA_cons thm
R13850:13857 Coq.Lists.SetoidList <> InA_cons thm
R13850:13857 Coq.Lists.SetoidList <> InA_cons thm
R13850:13857 Coq.Lists.SetoidList <> InA_cons thm
R13850:13857 Coq.Lists.SetoidList <> InA_cons thm
R13874:13881 Coq.Lists.SetoidList <> InA_cons thm
R13874:13881 Coq.Lists.SetoidList <> InA_cons thm
R13874:13881 Coq.Lists.SetoidList <> InA_cons thm
R13874:13881 Coq.Lists.SetoidList <> InA_cons thm
inst 13945:13952 MakeRaw empty_ok
R13956:13957 Coq.MSets.MSetList MakeRaw Ok class
R13959:13963 Coq.MSets.MSetList MakeRaw empty def
prf 14007:14016 MakeRaw empty_spec
R14020:14024 Coq.MSets.MSetList MakeRaw Empty def
R14026:14030 Coq.MSets.MSetList MakeRaw empty def
R14051:14055 Coq.MSets.MSetList MakeRaw Empty def
R14058:14062 Coq.MSets.MSetList MakeRaw empty def
prf 14097:14109 MakeRaw is_empty_spec
R14124:14124 Coq.MSets.MSetList MakeRaw t def
R14144:14148 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R14137:14139 Coq.Init.Logic <> :type_scope:x_'='_x not
R14127:14134 Coq.MSets.MSetList MakeRaw is_empty def
R14136:14136 Coq.MSets.MSetList <> s var
R14140:14143 Coq.Init.Datatypes <> true constr
R14149:14153 Coq.MSets.MSetList MakeRaw Empty def
R14155:14155 Coq.MSets.MSetList <> s var
prf 14294:14307 MakeRaw elements_spec1
R14323:14323 Coq.MSets.MSetList MakeRaw t def
R14331:14333 Coq.MSets.MSetList MakeRaw elt def
R14354:14358 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R14337:14338 Coq.MSets.MSetList MakeRaw In syndef
R14343:14350 Coq.MSets.MSetList MakeRaw elements def
R14352:14352 Coq.MSets.MSetList <> s var
R14340:14340 Coq.MSets.MSetList <> x var
R14359:14360 Coq.MSets.MSetList MakeRaw In syndef
R14364:14364 Coq.MSets.MSetList <> s var
R14362:14362 Coq.MSets.MSetList <> x var
prf 14405:14418 MakeRaw elements_spec2
R14434:14434 Coq.MSets.MSetList MakeRaw t def
R14443:14444 Coq.MSets.MSetList MakeRaw Ok class
R14446:14446 Coq.MSets.MSetList <> s var
R14450:14453 Coq.Sorting.Sorted <> sort syndef
R14461:14468 Coq.MSets.MSetList MakeRaw elements def
R14470:14470 Coq.MSets.MSetList <> s var
R14455:14458 Coq.MSets.MSetList X lt defax
R14512:14519 Coq.MSets.MSetList MakeRaw isok_iff thm
R14512:14519 Coq.MSets.MSetList MakeRaw isok_iff thm
R14512:14519 Coq.MSets.MSetList MakeRaw isok_iff thm
R14512:14519 Coq.MSets.MSetList MakeRaw isok_iff thm
prf 14544:14558 MakeRaw elements_spec2w
R14574:14574 Coq.MSets.MSetList MakeRaw t def
R14583:14584 Coq.MSets.MSetList MakeRaw Ok class
R14586:14586 Coq.MSets.MSetList <> s var
R14590:14595 Coq.Lists.SetoidList <> NoDupA ind
R14603:14610 Coq.MSets.MSetList MakeRaw elements def
R14612:14612 Coq.MSets.MSetList <> s var
R14597:14600 Coq.MSets.MSetList X eq defax
R14654:14661 Coq.MSets.MSetList MakeRaw isok_iff thm
R14654:14661 Coq.MSets.MSetList MakeRaw isok_iff thm
R14654:14661 Coq.MSets.MSetList MakeRaw isok_iff thm
R14654:14661 Coq.MSets.MSetList MakeRaw isok_iff thm
prf 14686:14698 MakeRaw min_elt_spec1
R14714:14714 Coq.MSets.MSetList MakeRaw t def
R14722:14724 Coq.MSets.MSetList MakeRaw elt def
R14746:14749 Coq.Init.Logic <> :type_scope:x_'->'_x not
R14750:14751 Coq.MSets.MSetList MakeRaw In syndef
R14755:14755 Coq.MSets.MSetList <> s var
R14753:14753 Coq.MSets.MSetList <> x var
R14737:14739 Coq.Init.Logic <> :type_scope:x_'='_x not
R14728:14734 Coq.MSets.MSetList MakeRaw min_elt def
R14736:14736 Coq.MSets.MSetList <> s var
R14740:14743 Coq.Init.Datatypes <> Some constr
R14745:14745 Coq.MSets.MSetList <> x var
prf 14823:14835 MakeRaw min_elt_spec2
R14854:14854 Coq.MSets.MSetList MakeRaw t def
R14864:14866 Coq.MSets.MSetList MakeRaw elt def
R14875:14876 Coq.MSets.MSetList MakeRaw Ok class
R14878:14878 Coq.MSets.MSetList <> s var
R14903:14906 Coq.Init.Logic <> :type_scope:x_'->'_x not
R14913:14916 Coq.Init.Logic <> :type_scope:x_'->'_x not
R14917:14918 Coq.Init.Logic <> :type_scope:'~'_x not
R14919:14922 Coq.MSets.MSetList X lt defax
R14926:14926 Coq.MSets.MSetList <> x var
R14924:14924 Coq.MSets.MSetList <> y var
R14907:14908 Coq.MSets.MSetList MakeRaw In syndef
R14912:14912 Coq.MSets.MSetList <> s var
R14910:14910 Coq.MSets.MSetList <> y var
R14894:14896 Coq.Init.Logic <> :type_scope:x_'='_x not
R14885:14891 Coq.MSets.MSetList MakeRaw min_elt def
R14893:14893 Coq.MSets.MSetList <> s var
R14897:14900 Coq.Init.Datatypes <> Some constr
R14902:14902 Coq.MSets.MSetList <> x var
prf 15050:15062 MakeRaw min_elt_spec3
R15077:15077 Coq.MSets.MSetList MakeRaw t def
R15096:15099 Coq.Init.Logic <> :type_scope:x_'->'_x not
R15100:15104 Coq.MSets.MSetList MakeRaw Empty def
R15106:15106 Coq.MSets.MSetList <> s var
R15089:15091 Coq.Init.Logic <> :type_scope:x_'='_x not
R15080:15086 Coq.MSets.MSetList MakeRaw min_elt def
R15088:15088 Coq.MSets.MSetList <> s var
R15092:15095 Coq.Init.Datatypes <> None constr
prf 15190:15202 MakeRaw max_elt_spec1
R15218:15218 Coq.MSets.MSetList MakeRaw t def
R15226:15228 Coq.MSets.MSetList MakeRaw elt def
R15250:15253 Coq.Init.Logic <> :type_scope:x_'->'_x not
R15254:15255 Coq.MSets.MSetList MakeRaw In syndef
R15259:15259 Coq.MSets.MSetList <> s var
R15257:15257 Coq.MSets.MSetList <> x var
R15241:15243 Coq.Init.Logic <> :type_scope:x_'='_x not
R15232:15238 Coq.MSets.MSetList MakeRaw max_elt def
R15240:15240 Coq.MSets.MSetList <> s var
R15244:15247 Coq.Init.Datatypes <> Some constr
R15249:15249 Coq.MSets.MSetList <> x var
prf 15414:15426 MakeRaw max_elt_spec2
R15445:15445 Coq.MSets.MSetList MakeRaw t def
R15455:15457 Coq.MSets.MSetList MakeRaw elt def
R15466:15467 Coq.MSets.MSetList MakeRaw Ok class
R15469:15469 Coq.MSets.MSetList <> s var
R15494:15497 Coq.Init.Logic <> :type_scope:x_'->'_x not
R15504:15507 Coq.Init.Logic <> :type_scope:x_'->'_x not
R15508:15509 Coq.Init.Logic <> :type_scope:'~'_x not
R15510:15513 Coq.MSets.MSetList X lt defax
R15517:15517 Coq.MSets.MSetList <> y var
R15515:15515 Coq.MSets.MSetList <> x var
R15498:15499 Coq.MSets.MSetList MakeRaw In syndef
R15503:15503 Coq.MSets.MSetList <> s var
R15501:15501 Coq.MSets.MSetList <> y var
R15485:15487 Coq.Init.Logic <> :type_scope:x_'='_x not
R15476:15482 Coq.MSets.MSetList MakeRaw max_elt def
R15484:15484 Coq.MSets.MSetList <> s var
R15488:15491 Coq.Init.Datatypes <> Some constr
R15493:15493 Coq.MSets.MSetList <> x var
R15669:15669 Coq.Init.Logic <> :type_scope:'~'_x not
R15670:15673 Coq.MSets.MSetList X lt defax
R15669:15669 Coq.Init.Logic <> :type_scope:'~'_x not
R15670:15673 Coq.MSets.MSetList X lt defax
R15711:15714 Coq.MSets.MSetList X lt defax
R15711:15714 Coq.MSets.MSetList X lt defax
prf 15755:15767 MakeRaw max_elt_spec3
R15782:15782 Coq.MSets.MSetList MakeRaw t def
R15801:15804 Coq.Init.Logic <> :type_scope:x_'->'_x not
R15805:15809 Coq.MSets.MSetList MakeRaw Empty def
R15811:15811 Coq.MSets.MSetList <> s var
R15794:15796 Coq.Init.Logic <> :type_scope:x_'='_x not
R15785:15791 Coq.MSets.MSetList MakeRaw max_elt def
R15793:15793 Coq.MSets.MSetList <> s var
R15797:15800 Coq.Init.Datatypes <> None constr
def 15966:15977 MakeRaw choose_spec1
R15997:15997 Coq.MSets.MSetList MakeRaw t def
R16005:16007 Coq.MSets.MSetList MakeRaw elt def
R16028:16031 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16032:16033 Coq.MSets.MSetList MakeRaw In syndef
R16037:16037 Coq.MSets.MSetList <> s var
R16035:16035 Coq.MSets.MSetList <> x var
R16019:16021 Coq.Init.Logic <> :type_scope:x_'='_x not
R16011:16016 Coq.MSets.MSetList MakeRaw choose def
R16018:16018 Coq.MSets.MSetList <> s var
R16022:16025 Coq.Init.Datatypes <> Some constr
R16027:16027 Coq.MSets.MSetList <> x var
R16042:16054 Coq.MSets.MSetList MakeRaw min_elt_spec1 thm
def 16071:16082 MakeRaw choose_spec2
R16101:16101 Coq.MSets.MSetList MakeRaw t def
R16119:16122 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16123:16127 Coq.MSets.MSetList MakeRaw Empty def
R16129:16129 Coq.MSets.MSetList <> s var
R16112:16114 Coq.Init.Logic <> :type_scope:x_'='_x not
R16104:16109 Coq.MSets.MSetList MakeRaw choose def
R16111:16111 Coq.MSets.MSetList <> s var
R16115:16118 Coq.Init.Datatypes <> None constr
R16134:16146 Coq.MSets.MSetList MakeRaw min_elt_spec3 thm
prf 16158:16169 MakeRaw choose_spec3
R16194:16197 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16203:16209 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16227:16230 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16250:16253 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16264:16267 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16268:16271 Coq.MSets.MSetList X eq defax
R16275:16276 Coq.MSets.MSetList <> x' var
R16273:16273 Coq.MSets.MSetList <> x var
R16254:16258 Coq.MSets.MSetList MakeRaw Equal def
R16262:16263 Coq.MSets.MSetList <> s' var
R16260:16260 Coq.MSets.MSetList <> s var
R16240:16242 Coq.Init.Logic <> :type_scope:x_'='_x not
R16231:16236 Coq.MSets.MSetList MakeRaw choose def
R16238:16239 Coq.MSets.MSetList <> s' var
R16243:16246 Coq.Init.Datatypes <> Some constr
R16248:16249 Coq.MSets.MSetList <> x' var
R16218:16220 Coq.Init.Logic <> :type_scope:x_'='_x not
R16210:16215 Coq.MSets.MSetList MakeRaw choose def
R16217:16217 Coq.MSets.MSetList <> s var
R16221:16224 Coq.Init.Datatypes <> Some constr
R16226:16226 Coq.MSets.MSetList <> x var
R16198:16199 Coq.MSets.MSetList MakeRaw Ok class
R16201:16202 Coq.MSets.MSetList <> s' var
R16190:16191 Coq.MSets.MSetList MakeRaw Ok class
R16193:16193 Coq.MSets.MSetList <> s var
R16298:16303 Coq.MSets.MSetList MakeRaw choose def
R16351:16351 Coq.Init.Logic <> :type_scope:'~'_x not
R16352:16355 Coq.MSets.MSetList X lt defax
R16351:16351 Coq.Init.Logic <> :type_scope:'~'_x not
R16352:16355 Coq.MSets.MSetList X lt defax
R16374:16386 Coq.MSets.MSetList MakeRaw min_elt_spec2 thm
R16374:16386 Coq.MSets.MSetList MakeRaw min_elt_spec2 thm
R16431:16443 Coq.MSets.MSetList MakeRaw min_elt_spec1 thm
R16431:16443 Coq.MSets.MSetList MakeRaw min_elt_spec1 thm
R16457:16457 Coq.Init.Logic <> :type_scope:'~'_x not
R16458:16461 Coq.MSets.MSetList X lt defax
R16457:16457 Coq.Init.Logic <> :type_scope:'~'_x not
R16458:16461 Coq.MSets.MSetList X lt defax
R16480:16492 Coq.MSets.MSetList MakeRaw min_elt_spec2 thm
R16480:16492 Coq.MSets.MSetList MakeRaw min_elt_spec2 thm
R16534:16546 Coq.MSets.MSetList MakeRaw min_elt_spec1 thm
R16534:16546 Coq.MSets.MSetList MakeRaw min_elt_spec1 thm
prf 16575:16583 MakeRaw fold_spec
R16602:16602 Coq.MSets.MSetList MakeRaw t def
R16621:16621 Coq.MSets.MSetList <> A var
R16632:16635 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16637:16640 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16641:16641 Coq.MSets.MSetList <> A var
R16636:16636 Coq.MSets.MSetList <> A var
R16629:16631 Coq.MSets.MSetList MakeRaw elt def
R16658:16660 Coq.Init.Logic <> :type_scope:x_'='_x not
R16648:16651 Coq.MSets.MSetList MakeRaw fold def
R16657:16657 Coq.MSets.MSetList <> i var
R16655:16655 Coq.MSets.MSetList <> s var
R16653:16653 Coq.MSets.MSetList <> f var
R16661:16669 Coq.Lists.List <> fold_left def
R16693:16693 Coq.MSets.MSetList <> i var
R16681:16688 Coq.MSets.MSetList MakeRaw elements def
R16690:16690 Coq.MSets.MSetList <> s var
R16672:16675 Coq.Program.Basics <> flip def
R16677:16677 Coq.MSets.MSetList <> f var
prf 16736:16748 MakeRaw cardinal_spec
R16767:16767 Coq.MSets.MSetList MakeRaw t def
R16776:16777 Coq.MSets.MSetList MakeRaw Ok class
R16779:16779 Coq.MSets.MSetList <> s var
R16796:16798 Coq.Init.Logic <> :type_scope:x_'='_x not
R16786:16793 Coq.MSets.MSetList MakeRaw cardinal def
R16795:16795 Coq.MSets.MSetList <> s var
R16799:16804 Coq.Init.Datatypes <> length def
R16807:16814 Coq.MSets.MSetList MakeRaw elements def
R16816:16816 Coq.MSets.MSetList <> s var
prf 16853:16862 MakeRaw filter_inf
R16881:16881 Coq.MSets.MSetList MakeRaw t def
R16889:16891 Coq.MSets.MSetList MakeRaw elt def
R16902:16905 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16906:16909 Coq.Init.Datatypes <> bool ind
R16899:16901 Coq.MSets.MSetList MakeRaw elt def
R16918:16919 Coq.MSets.MSetList MakeRaw Ok class
R16921:16921 Coq.MSets.MSetList <> s var
R16935:16938 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16939:16941 Coq.MSets.MSetList MakeRaw Inf syndef
R16946:16951 Coq.MSets.MSetList MakeRaw filter def
R16955:16955 Coq.MSets.MSetList <> s var
R16953:16953 Coq.MSets.MSetList <> f var
R16943:16943 Coq.MSets.MSetList <> x var
R16928:16930 Coq.MSets.MSetList MakeRaw Inf syndef
R16934:16934 Coq.MSets.MSetList <> s var
R16932:16932 Coq.MSets.MSetList <> x var
R17092:17097 Coq.MSets.MSetList MakeRaw Inf_lt thm
R17092:17097 Coq.MSets.MSetList MakeRaw Inf_lt thm
inst 17139:17147 MakeRaw filter_ok
R17164:17165 Coq.MSets.MSetList MakeRaw Ok class
R17167:17167 Coq.MSets.MSetList <> s var
R17171:17172 Coq.MSets.MSetList MakeRaw Ok class
R17175:17180 Coq.MSets.MSetList MakeRaw filter def
R17184:17184 Coq.MSets.MSetList <> s var
R17182:17182 Coq.MSets.MSetList <> f var
R17217:17224 Coq.MSets.MSetList MakeRaw isok_iff thm
R17217:17224 Coq.MSets.MSetList MakeRaw isok_iff thm
R17217:17224 Coq.MSets.MSetList MakeRaw isok_iff thm
R17217:17224 Coq.MSets.MSetList MakeRaw isok_iff thm
R17217:17224 Coq.MSets.MSetList MakeRaw isok_iff thm
R17217:17224 Coq.MSets.MSetList MakeRaw isok_iff thm
R17355:17364 Coq.MSets.MSetList MakeRaw filter_inf thm
R17355:17364 Coq.MSets.MSetList MakeRaw filter_inf thm
prf 17389:17399 MakeRaw filter_spec
R17418:17418 Coq.MSets.MSetList MakeRaw t def
R17426:17428 Coq.MSets.MSetList MakeRaw elt def
R17439:17442 Coq.Init.Logic <> :type_scope:x_'->'_x not
R17443:17446 Coq.Init.Datatypes <> bool ind
R17436:17438 Coq.MSets.MSetList MakeRaw elt def
R17473:17480 Coq.Init.Logic <> :type_scope:x_'->'_x not
R17523:17523 Coq.Init.Logic <> :type_scope:x_'->'_x not
R17498:17502 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R17481:17482 Coq.MSets.MSetList MakeRaw In syndef
R17487:17492 Coq.MSets.MSetList MakeRaw filter def
R17496:17496 Coq.MSets.MSetList <> s var
R17494:17494 Coq.MSets.MSetList <> f var
R17484:17484 Coq.MSets.MSetList <> x var
R17509:17512 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17503:17504 Coq.MSets.MSetList MakeRaw In syndef
R17508:17508 Coq.MSets.MSetList <> s var
R17506:17506 Coq.MSets.MSetList <> x var
R17516:17518 Coq.Init.Logic <> :type_scope:x_'='_x not
R17513:17513 Coq.MSets.MSetList <> f var
R17515:17515 Coq.MSets.MSetList <> x var
R17519:17522 Coq.Init.Datatypes <> true constr
R17453:17458 Coq.Classes.Morphisms <> Proper class
R17472:17472 Coq.MSets.MSetList <> f var
R17465:17467 Coq.Classes.Morphisms ProperNotations :signature_scope:x_'==>'_x not
R17461:17464 Coq.MSets.MSetList X eq defax
R17468:17469 Coq.Init.Logic <> eq ind
R17623:17630 Coq.Lists.SetoidList <> InA_cons thm
R17623:17630 Coq.Lists.SetoidList <> InA_cons thm
R17623:17630 Coq.Lists.SetoidList <> InA_cons thm
R17623:17630 Coq.Lists.SetoidList <> InA_cons thm
R17623:17630 Coq.Lists.SetoidList <> InA_cons thm
R17623:17630 Coq.Lists.SetoidList <> InA_cons thm
R17623:17630 Coq.Lists.SetoidList <> InA_cons thm
R17623:17630 Coq.Lists.SetoidList <> InA_cons thm
prf 17749:17760 MakeRaw for_all_spec
R17779:17779 Coq.MSets.MSetList MakeRaw t def
R17790:17793 Coq.Init.Logic <> :type_scope:x_'->'_x not
R17794:17797 Coq.Init.Datatypes <> bool ind
R17787:17789 Coq.MSets.MSetList MakeRaw elt def
R17824:17831 Coq.Init.Logic <> :type_scope:x_'->'_x not
R17886:17886 Coq.Init.Logic <> :type_scope:x_'->'_x not
R17850:17854 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R17843:17845 Coq.Init.Logic <> :type_scope:x_'='_x not
R17832:17838 Coq.MSets.MSetList MakeRaw for_all def
R17842:17842 Coq.MSets.MSetList <> s var
R17840:17840 Coq.MSets.MSetList <> f var
R17846:17849 Coq.Init.Datatypes <> true constr
R17855:17861 Coq.MSets.MSetList MakeRaw For_all def
R17885:17885 Coq.MSets.MSetList <> s var
R17876:17878 Coq.Init.Logic <> :type_scope:x_'='_x not
R17873:17873 Coq.MSets.MSetList <> f var
R17875:17875 Coq.MSets.MSetList <> x var
R17879:17882 Coq.Init.Datatypes <> true constr
R17804:17809 Coq.Classes.Morphisms <> Proper class
R17823:17823 Coq.MSets.MSetList <> f var
R17816:17818 Coq.Classes.Morphisms ProperNotations :signature_scope:x_'==>'_x not
R17812:17815 Coq.MSets.MSetList X eq defax
R17819:17820 Coq.Init.Logic <> eq ind
R17907:17913 Coq.MSets.MSetList MakeRaw For_all def
prf 18148:18158 MakeRaw exists_spec
R18177:18177 Coq.MSets.MSetList MakeRaw t def
R18188:18191 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18192:18195 Coq.Init.Datatypes <> bool ind
R18185:18187 Coq.MSets.MSetList MakeRaw elt def
R18222:18229 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18283:18283 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18248:18252 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R18241:18243 Coq.Init.Logic <> :type_scope:x_'='_x not
R18230:18236 Coq.MSets.MSetList MakeRaw exists_ def
R18240:18240 Coq.MSets.MSetList <> s var
R18238:18238 Coq.MSets.MSetList <> f var
R18244:18247 Coq.Init.Datatypes <> true constr
R18253:18258 Coq.MSets.MSetList MakeRaw Exists def
R18282:18282 Coq.MSets.MSetList <> s var
R18273:18275 Coq.Init.Logic <> :type_scope:x_'='_x not
R18270:18270 Coq.MSets.MSetList <> f var
R18272:18272 Coq.MSets.MSetList <> x var
R18276:18279 Coq.Init.Datatypes <> true constr
R18202:18207 Coq.Classes.Morphisms <> Proper class
R18221:18221 Coq.MSets.MSetList <> f var
R18214:18216 Coq.Classes.Morphisms ProperNotations :signature_scope:x_'==>'_x not
R18210:18213 Coq.MSets.MSetList X eq defax
R18217:18218 Coq.Init.Logic <> eq ind
R18304:18309 Coq.MSets.MSetList MakeRaw Exists def
prf 18537:18550 MakeRaw partition_inf1
R18569:18569 Coq.MSets.MSetList MakeRaw t def
R18580:18583 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18584:18587 Coq.Init.Datatypes <> bool ind
R18577:18579 Coq.MSets.MSetList MakeRaw elt def
R18595:18597 Coq.MSets.MSetList MakeRaw elt def
R18606:18607 Coq.MSets.MSetList MakeRaw Ok class
R18609:18609 Coq.MSets.MSetList <> s var
R18623:18626 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18627:18629 Coq.MSets.MSetList MakeRaw Inf syndef
R18634:18636 Coq.Init.Datatypes <> fst def
R18639:18647 Coq.MSets.MSetList MakeRaw partition def
R18651:18651 Coq.MSets.MSetList <> s var
R18649:18649 Coq.MSets.MSetList <> f var
R18631:18631 Coq.MSets.MSetList <> x var
R18616:18618 Coq.MSets.MSetList MakeRaw Inf syndef
R18622:18622 Coq.MSets.MSetList <> s var
R18620:18620 Coq.MSets.MSetList <> x var
R18699:18706 Coq.MSets.MSetList MakeRaw isok_iff thm
R18699:18706 Coq.MSets.MSetList MakeRaw isok_iff thm
R18699:18706 Coq.MSets.MSetList MakeRaw isok_iff thm
R18699:18706 Coq.MSets.MSetList MakeRaw isok_iff thm
R18846:18854 Coq.MSets.MSetList MakeRaw partition def
R18846:18854 Coq.MSets.MSetList MakeRaw partition def
R18846:18854 Coq.MSets.MSetList MakeRaw partition def
R18903:18908 Coq.MSets.MSetList MakeRaw Inf_lt thm
R18903:18908 Coq.MSets.MSetList MakeRaw Inf_lt thm
prf 18940:18953 MakeRaw partition_inf2
R18972:18972 Coq.MSets.MSetList MakeRaw t def
R18983:18986 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18987:18990 Coq.Init.Datatypes <> bool ind
R18980:18982 Coq.MSets.MSetList MakeRaw elt def
R18998:19000 Coq.MSets.MSetList MakeRaw elt def
R19009:19010 Coq.MSets.MSetList MakeRaw Ok class
R19012:19012 Coq.MSets.MSetList <> s var
R19026:19029 Coq.Init.Logic <> :type_scope:x_'->'_x not
R19030:19032 Coq.MSets.MSetList MakeRaw Inf syndef
R19037:19039 Coq.Init.Datatypes <> snd def
R19042:19050 Coq.MSets.MSetList MakeRaw partition def
R19054:19054 Coq.MSets.MSetList <> s var
R19052:19052 Coq.MSets.MSetList <> f var
R19034:19034 Coq.MSets.MSetList <> x var
R19019:19021 Coq.MSets.MSetList MakeRaw Inf syndef
R19025:19025 Coq.MSets.MSetList <> s var
R19023:19023 Coq.MSets.MSetList <> x var
R19102:19109 Coq.MSets.MSetList MakeRaw isok_iff thm
R19102:19109 Coq.MSets.MSetList MakeRaw isok_iff thm
R19102:19109 Coq.MSets.MSetList MakeRaw isok_iff thm
R19102:19109 Coq.MSets.MSetList MakeRaw isok_iff thm
R19249:19257 Coq.MSets.MSetList MakeRaw partition def
R19249:19257 Coq.MSets.MSetList MakeRaw partition def
R19249:19257 Coq.MSets.MSetList MakeRaw partition def
R19298:19303 Coq.MSets.MSetList MakeRaw Inf_lt thm
R19298:19303 Coq.MSets.MSetList MakeRaw Inf_lt thm
inst 19353:19365 MakeRaw partition_ok1
R19382:19383 Coq.MSets.MSetList MakeRaw Ok class
R19385:19385 Coq.MSets.MSetList <> s var
R19389:19390 Coq.MSets.MSetList MakeRaw Ok class
R19393:19395 Coq.Init.Datatypes <> fst def
R19398:19406 Coq.MSets.MSetList MakeRaw partition def
R19410:19410 Coq.MSets.MSetList <> s var
R19408:19408 Coq.MSets.MSetList <> f var
R19444:19451 Coq.MSets.MSetList MakeRaw isok_iff thm
R19444:19451 Coq.MSets.MSetList MakeRaw isok_iff thm
R19444:19451 Coq.MSets.MSetList MakeRaw isok_iff thm
R19444:19451 Coq.MSets.MSetList MakeRaw isok_iff thm
R19444:19451 Coq.MSets.MSetList MakeRaw isok_iff thm
R19444:19451 Coq.MSets.MSetList MakeRaw isok_iff thm
R19570:19583 Coq.MSets.MSetList MakeRaw partition_inf1 thm
R19570:19583 Coq.MSets.MSetList MakeRaw partition_inf1 thm
R19613:19621 Coq.MSets.MSetList MakeRaw partition def
R19613:19621 Coq.MSets.MSetList MakeRaw partition def
R19613:19621 Coq.MSets.MSetList MakeRaw partition def
inst 19668:19680 MakeRaw partition_ok2
R19697:19698 Coq.MSets.MSetList MakeRaw Ok class
R19700:19700 Coq.MSets.MSetList <> s var
R19704:19705 Coq.MSets.MSetList MakeRaw Ok class
R19708:19710 Coq.Init.Datatypes <> snd def
R19713:19721 Coq.MSets.MSetList MakeRaw partition def
R19725:19725 Coq.MSets.MSetList <> s var
R19723:19723 Coq.MSets.MSetList <> f var
R19759:19766 Coq.MSets.MSetList MakeRaw isok_iff thm
R19759:19766 Coq.MSets.MSetList MakeRaw isok_iff thm
R19759:19766 Coq.MSets.MSetList MakeRaw isok_iff thm
R19759:19766 Coq.MSets.MSetList MakeRaw isok_iff thm
R19759:19766 Coq.MSets.MSetList MakeRaw isok_iff thm
R19759:19766 Coq.MSets.MSetList MakeRaw isok_iff thm
R19885:19898 Coq.MSets.MSetList MakeRaw partition_inf2 thm
R19885:19898 Coq.MSets.MSetList MakeRaw partition_inf2 thm
R19928:19936 Coq.MSets.MSetList MakeRaw partition def
R19928:19936 Coq.MSets.MSetList MakeRaw partition def
R19928:19936 Coq.MSets.MSetList MakeRaw partition def
prf 19973:19987 MakeRaw partition_spec1
R20006:20006 Coq.MSets.MSetList MakeRaw t def
R20017:20020 Coq.Init.Logic <> :type_scope:x_'->'_x not
R20021:20024 Coq.Init.Datatypes <> bool ind
R20014:20016 Coq.MSets.MSetList MakeRaw elt def
R20051:20054 Coq.Init.Logic <> :type_scope:x_'->'_x not
R20055:20059 Coq.MSets.MSetList MakeRaw Equal def
R20084:20089 Coq.MSets.MSetList MakeRaw filter def
R20093:20093 Coq.MSets.MSetList <> s var
R20091:20091 Coq.MSets.MSetList <> f var
R20062:20064 Coq.Init.Datatypes <> fst def
R20067:20075 Coq.MSets.MSetList MakeRaw partition def
R20079:20079 Coq.MSets.MSetList <> s var
R20077:20077 Coq.MSets.MSetList <> f var
R20031:20036 Coq.Classes.Morphisms <> Proper class
R20050:20050 Coq.MSets.MSetList <> f var
R20043:20045 Coq.Classes.Morphisms ProperNotations :signature_scope:x_'==>'_x not
R20039:20042 Coq.MSets.MSetList X eq defax
R20046:20047 Coq.Init.Logic <> eq ind
R20148:20152 Coq.MSets.MSetList MakeRaw Equal def
R20244:20252 Coq.MSets.MSetList MakeRaw partition def
R20244:20252 Coq.MSets.MSetList MakeRaw partition def
prf 20434:20448 MakeRaw partition_spec2
R20467:20467 Coq.MSets.MSetList MakeRaw t def
R20478:20481 Coq.Init.Logic <> :type_scope:x_'->'_x not
R20482:20485 Coq.Init.Datatypes <> bool ind
R20475:20477 Coq.MSets.MSetList MakeRaw elt def
R20512:20518 Coq.Init.Logic <> :type_scope:x_'->'_x not
R20519:20523 Coq.MSets.MSetList MakeRaw Equal def
R20548:20553 Coq.MSets.MSetList MakeRaw filter def
R20577:20577 Coq.MSets.MSetList <> s var
R20565:20568 Coq.Init.Datatypes <> negb def
R20571:20571 Coq.MSets.MSetList <> f var
R20573:20573 Coq.MSets.MSetList <> x var
R20526:20528 Coq.Init.Datatypes <> snd def
R20531:20539 Coq.MSets.MSetList MakeRaw partition def
R20543:20543 Coq.MSets.MSetList <> s var
R20541:20541 Coq.MSets.MSetList <> f var
R20492:20497 Coq.Classes.Morphisms <> Proper class
R20511:20511 Coq.MSets.MSetList <> f var
R20504:20506 Coq.Classes.Morphisms ProperNotations :signature_scope:x_'==>'_x not
R20500:20503 Coq.MSets.MSetList X eq defax
R20507:20508 Coq.Init.Logic <> eq ind
R20632:20636 Coq.MSets.MSetList MakeRaw Equal def
R20728:20736 Coq.MSets.MSetList MakeRaw partition def
R20728:20736 Coq.MSets.MSetList MakeRaw partition def
R20916:20927 Coq.MSets.MSetList MakeRaw.ForNotations <> sec
def 20944:20945 MakeRaw In
R20950:20952 Coq.Lists.SetoidList <> InA ind
R20954:20957 Coq.MSets.MSetList X eq defax
inst 20971:20979 MakeRaw In_compat
R20983:20988 Coq.Classes.Morphisms <> Proper class
R21009:21010 Coq.MSets.MSetList MakeRaw In def
R20995:20997 Coq.Classes.Morphisms ProperNotations :signature_scope:x_'==>'_x not
R20991:20994 Coq.MSets.MSetList X eq defax
R21000:21003 Coq.Classes.Morphisms ProperNotations :signature_scope:x_'==>'_x not
R20998:20999 Coq.Init.Logic <> eq ind
R21004:21006 Coq.Init.Logic <> iff def
R21083:21098 Coq.MSets.MSetInterface MakeListOrdering <> modtype
R21100:21100 Coq.MSets.MSetList X <> modtype
mod 21078:21078 <> MakeRaw.L
def 21116:21117 MakeRaw eq
R21122:21125 Coq.MSets.MSetList MakeRaw eq def
def 21141:21148 MakeRaw eq_equiv
R21153:21162 Coq.MSets.MSetList MakeRaw eq_equiv inst
def 21178:21179 MakeRaw lt
R21194:21200 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R21208:21209 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R21216:21219 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R21210:21211 Coq.MSets.MSetList MakeRaw Ok class
R21213:21215 Coq.MSets.MSetList <> l1' var
R21226:21229 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R21220:21221 Coq.MSets.MSetList MakeRaw Ok class
R21223:21225 Coq.MSets.MSetList <> l2' var
R21239:21242 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R21230:21231 Coq.MSets.MSetList MakeRaw eq def
R21236:21238 Coq.MSets.MSetList <> l1' var
R21233:21234 Coq.MSets.MSetList <> l1 var
R21252:21255 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R21243:21244 Coq.MSets.MSetList MakeRaw eq def
R21249:21251 Coq.MSets.MSetList <> l2' var
R21246:21247 Coq.MSets.MSetList <> l2 var
R21256:21259 Coq.MSets.MSetList MakeRaw lt def
R21265:21267 Coq.MSets.MSetList <> l2' var
R21261:21263 Coq.MSets.MSetList <> l1' var
inst 21282:21292 MakeRaw lt_strorder
R21296:21306 Coq.Classes.RelationClasses <> StrictOrder class
R21308:21309 Coq.MSets.MSetList MakeRaw lt def
R21396:21403 Coq.MSets.MSetList MakeRaw isok_iff thm
R21396:21403 Coq.MSets.MSetList MakeRaw isok_iff thm
R21396:21403 Coq.MSets.MSetList MakeRaw isok_iff thm
R21396:21403 Coq.MSets.MSetList MakeRaw isok_iff thm
R21421:21427 Coq.Lists.SetoidList <> eqlistA ind
R21429:21432 Coq.MSets.MSetList X eq defax
R21421:21427 Coq.Lists.SetoidList <> eqlistA ind
R21429:21432 Coq.MSets.MSetList X eq defax
R21487:21490 Coq.MSets.MSetList X lt defax
R21451:21474 Coq.Lists.SetoidList <> SortA_equivlistA_eqlistA thm
R21506:21507 Coq.MSets.MSetList MakeRaw ok def
R21487:21490 Coq.MSets.MSetList X lt defax
R21451:21474 Coq.Lists.SetoidList <> SortA_equivlistA_eqlistA thm
R21506:21507 Coq.MSets.MSetList MakeRaw ok def
R21506:21507 Coq.MSets.MSetList MakeRaw ok def
R21506:21507 Coq.MSets.MSetList MakeRaw ok def
R21506:21507 Coq.MSets.MSetList MakeRaw ok def
R21506:21507 Coq.MSets.MSetList MakeRaw ok def
R21506:21507 Coq.MSets.MSetList MakeRaw ok def
R21585:21607 Coq.Classes.RelationClasses <> StrictOrder_Irreflexive meth
R21585:21607 Coq.Classes.RelationClasses <> StrictOrder_Irreflexive meth
R21775:21782 Coq.MSets.MSetList MakeRaw isok_iff thm
R21775:21782 Coq.MSets.MSetList MakeRaw isok_iff thm
R21775:21782 Coq.MSets.MSetList MakeRaw isok_iff thm
R21775:21782 Coq.MSets.MSetList MakeRaw isok_iff thm
R21775:21782 Coq.MSets.MSetList MakeRaw isok_iff thm
R21775:21782 Coq.MSets.MSetList MakeRaw isok_iff thm
R21825:21831 Coq.Lists.SetoidList <> eqlistA ind
R21833:21836 Coq.MSets.MSetList X eq defax
R21825:21831 Coq.Lists.SetoidList <> eqlistA ind
R21833:21836 Coq.MSets.MSetList X eq defax
R21894:21897 Coq.MSets.MSetList X lt defax
R21858:21881 Coq.Lists.SetoidList <> SortA_equivlistA_eqlistA thm
R21913:21914 Coq.MSets.MSetList MakeRaw ok def
R21894:21897 Coq.MSets.MSetList X lt defax
R21858:21881 Coq.Lists.SetoidList <> SortA_equivlistA_eqlistA thm
R21913:21914 Coq.MSets.MSetList MakeRaw ok def
R21913:21914 Coq.MSets.MSetList MakeRaw ok def
R21913:21914 Coq.MSets.MSetList MakeRaw ok def
R21913:21914 Coq.MSets.MSetList MakeRaw ok def
R21913:21914 Coq.MSets.MSetList MakeRaw ok def
R21913:21914 Coq.MSets.MSetList MakeRaw ok def
inst 22030:22038 MakeRaw lt_compat
R22042:22047 Coq.Classes.Morphisms <> Proper class
R22065:22066 Coq.MSets.MSetList MakeRaw lt def
R22052:22054 Coq.Classes.Morphisms ProperNotations :signature_scope:x_'==>'_x not
R22050:22051 Coq.MSets.MSetList MakeRaw eq def
R22057:22059 Coq.Classes.Morphisms ProperNotations :signature_scope:x_'==>'_x not
R22055:22056 Coq.MSets.MSetList MakeRaw eq def
R22060:22062 Coq.Init.Logic <> iff def
prf 22485:22500 MakeRaw compare_spec_aux
R22517:22524 Coq.Init.Datatypes <> CompSpec def
R22540:22546 Coq.MSets.MSetList MakeRaw compare def
R22550:22551 Coq.MSets.MSetList <> s' var
R22548:22548 Coq.MSets.MSetList <> s var
R22536:22537 Coq.MSets.MSetList <> s' var
R22534:22534 Coq.MSets.MSetList <> s var
R22529:22532 Coq.MSets.MSetList MakeRaw lt def
R22526:22527 Coq.MSets.MSetList MakeRaw eq def
prf 22671:22682 MakeRaw compare_spec
R22703:22706 Coq.Init.Logic <> :type_scope:x_'->'_x not
R22712:22718 Coq.Init.Logic <> :type_scope:x_'->'_x not
R22719:22726 Coq.Init.Datatypes <> CompSpec def
R22740:22746 Coq.MSets.MSetList MakeRaw compare def
R22750:22751 Coq.MSets.MSetList <> s' var
R22748:22748 Coq.MSets.MSetList <> s var
R22736:22737 Coq.MSets.MSetList <> s' var
R22734:22734 Coq.MSets.MSetList <> s var
R22731:22732 Coq.MSets.MSetList MakeRaw lt def
R22728:22729 Coq.MSets.MSetList MakeRaw eq def
R22707:22708 Coq.MSets.MSetList MakeRaw Ok class
R22710:22711 Coq.MSets.MSetList <> s' var
R22699:22700 Coq.MSets.MSetList MakeRaw Ok class
R22702:22702 Coq.MSets.MSetList <> s var
R22798:22813 Coq.MSets.MSetList MakeRaw compare_spec_aux thm
R22798:22813 Coq.MSets.MSetList MakeRaw compare_spec_aux thm
R22883:22884 Coq.MSets.MSetList MakeRaw ok def
R22883:22884 Coq.MSets.MSetList MakeRaw ok def
R22883:22884 Coq.MSets.MSetList MakeRaw ok def
R22883:22884 Coq.MSets.MSetList MakeRaw ok def
R22883:22884 Coq.MSets.MSetList MakeRaw ok def
R22883:22884 Coq.MSets.MSetList MakeRaw ok def
R22883:22884 Coq.MSets.MSetList MakeRaw ok def
R22883:22884 Coq.MSets.MSetList MakeRaw ok def
R22929:22930 Coq.MSets.MSetList MakeRaw ok def
R22929:22930 Coq.MSets.MSetList MakeRaw ok def
R22929:22930 Coq.MSets.MSetList MakeRaw ok def
R22929:22930 Coq.MSets.MSetList MakeRaw ok def
R22929:22930 Coq.MSets.MSetList MakeRaw ok def
R22929:22930 Coq.MSets.MSetList MakeRaw ok def
R22929:22930 Coq.MSets.MSetList MakeRaw ok def
R22929:22930 Coq.MSets.MSetList MakeRaw ok def
R22945:22951 Coq.MSets.MSetList MakeRaw <> mod
R23135:23145 Coq.Structures.Orders OrderedType <> mod
R23151:23151 Coq.MSets.MSetInterface S <> mod
R23170:23170 Coq.MSets.MSetList X <> modtype
mod 23126:23129 <> Make
R23188:23194 Coq.MSets.MSetList MakeRaw <> modtype
R23196:23196 Coq.MSets.MSetList X <> modtype
mod 23181:23183 <> Make.Raw
R23208:23215 Coq.MSets.MSetInterface Raw2Sets <> modtype
R23217:23217 Coq.MSets.MSetList X <> modtype
R23219:23221 Coq.MSets.MSetList Make.Raw <> modtype
R23228:23231 Coq.MSets.MSetList Make <> mod
R23320:23328 Coq.Logic.Eqdep_dec <> <> lib
modtype 23344:23365 <> OrderedTypeWithLeibniz
R23378:23388 Coq.Structures.Orders OrderedType <> mod
ax 23403:23412 OrderedTypeWithLeibniz eq_leibniz
R23434:23437 Coq.Init.Logic <> :type_scope:x_'->'_x not
R23439:23441 Coq.Init.Logic <> :type_scope:x_'='_x not
R23438:23438 Coq.MSets.MSetList <> x var
R23442:23442 Coq.MSets.MSetList <> y var
R23428:23429 Coq.MSets.MSetList OrderedTypeWithLeibniz eq defax
R23433:23433 Coq.MSets.MSetList <> y var
R23431:23431 Coq.MSets.MSetList <> x var
R23449:23470 Coq.MSets.MSetList OrderedTypeWithLeibniz <> modtype
modtype 23486:23497 <> SWithLeibniz
R23521:23542 Coq.MSets.MSetList OrderedTypeWithLeibniz <> mod
mod 23517:23517 <> SWithLeibniz.E
R23555:23560 Coq.MSets.MSetInterface SetsOn <> mod
R23562:23562 Coq.MSets.MSetList SWithLeibniz.E <> modtype
ax 23577:23586 SWithLeibniz eq_leibniz
R23608:23611 Coq.Init.Logic <> :type_scope:x_'->'_x not
R23613:23615 Coq.Init.Logic <> :type_scope:x_'='_x not
R23612:23612 Coq.MSets.MSetList <> x var
R23616:23616 Coq.MSets.MSetList <> y var
R23602:23603 Coq.MSets.MSetList SWithLeibniz eq def
R23607:23607 Coq.MSets.MSetList <> y var
R23605:23605 Coq.MSets.MSetList <> x var
R23623:23634 Coq.MSets.MSetList SWithLeibniz <> modtype
R23665:23686 Coq.MSets.MSetList OrderedTypeWithLeibniz <> mod
R23692:23703 Coq.MSets.MSetList SWithLeibniz <> mod
R23722:23722 Coq.MSets.MSetList X <> modtype
mod 23645:23659 <> MakeWithLeibniz
R23739:23739 Coq.MSets.MSetList X <> modtype
mod 23734:23734 <> MakeWithLeibniz.E
R23758:23764 Coq.MSets.MSetList MakeRaw <> modtype
R23766:23766 Coq.MSets.MSetList X <> modtype
mod 23751:23753 <> MakeWithLeibniz.Raw
R23779:23788 Coq.MSets.MSetInterface Raw2SetsOn <> modtype
R23790:23790 Coq.MSets.MSetList X <> modtype
R23792:23794 Coq.MSets.MSetList MakeWithLeibniz.Raw <> modtype
prf 23806:23820 MakeWithLeibniz eq_leibniz_list
R23856:23859 Coq.Init.Logic <> :type_scope:x_'->'_x not
R23862:23864 Coq.Init.Logic <> :type_scope:x_'='_x not
R23860:23861 Coq.MSets.MSetList <> xs var
R23865:23866 Coq.MSets.MSetList <> ys var
R23838:23844 Coq.Lists.SetoidList <> eqlistA ind
R23854:23855 Coq.MSets.MSetList <> ys var
R23851:23852 Coq.MSets.MSetList <> xs var
R23846:23849 Coq.MSets.MSetList X eq defax
R23985:23996 Coq.MSets.MSetList X eq_leibniz defax
R23985:23996 Coq.MSets.MSetList X eq_leibniz defax
prf 24062:24071 MakeWithLeibniz eq_leibniz
R24095:24098 Coq.Init.Logic <> :type_scope:x_'->'_x not
R24100:24102 Coq.Init.Logic <> :type_scope:x_'='_x not
R24099:24099 Coq.MSets.MSetList <> s var
R24103:24104 Coq.MSets.MSetList <> s' var
R24088:24089 Coq.MSets.MSetList MakeWithLeibniz eq def
R24093:24094 Coq.MSets.MSetList <> s' var
R24091:24091 Coq.MSets.MSetList <> s var
R24162:24171 Coq.Lists.SetoidList <> equivlistA def
R24173:24176 Coq.MSets.MSetList X eq defax
R24162:24171 Coq.Lists.SetoidList <> equivlistA def
R24173:24176 Coq.MSets.MSetList X eq defax
R24209:24215 Coq.Lists.SetoidList <> eqlistA ind
R24217:24220 Coq.MSets.MSetList X eq defax
R24209:24215 Coq.Lists.SetoidList <> eqlistA ind
R24217:24220 Coq.MSets.MSetList X eq defax
R24247:24258 Coq.MSets.MSetList MakeWithLeibniz isok_iff thm
R24247:24258 Coq.MSets.MSetList MakeWithLeibniz isok_iff thm
R24247:24258 Coq.MSets.MSetList MakeWithLeibniz isok_iff thm
R24315:24318 Coq.MSets.MSetList X lt defax
R24285:24308 Coq.Lists.SetoidList <> SortA_equivlistA_eqlistA thm
R24315:24318 Coq.MSets.MSetList X lt defax
R24285:24308 Coq.Lists.SetoidList <> SortA_equivlistA_eqlistA thm
R24344:24358 Coq.MSets.MSetList MakeWithLeibniz eq_leibniz_list thm
R24344:24358 Coq.MSets.MSetList MakeWithLeibniz eq_leibniz_list thm
R24403:24429 Coq.Logic.Eqdep_dec <> eq_proofs_unicity thm
R24403:24429 Coq.Logic.Eqdep_dec <> eq_proofs_unicity thm
R24458:24465 Coq.Bool.Bool <> bool_dec thm
R24458:24465 Coq.Bool.Bool <> bool_dec thm
R24492:24506 Coq.MSets.MSetList MakeWithLeibniz <> mod
